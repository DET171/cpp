import{d as s}from"./app.5151ec96.js";import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";const a={},l=s(`<h1 id="greedy-algorithms" tabindex="-1"><a class="header-anchor" href="#greedy-algorithms" aria-hidden="true">#</a> Greedy Algorithms</h1><h2 id="greedy-algorithms-explained" tabindex="-1"><a class="header-anchor" href="#greedy-algorithms-explained" aria-hidden="true">#</a> Greedy Algorithms explained</h2><p>Greedy algorithms is not caring about overall optimal solution, but rather the optimal solution in one particular case (boy am i bad at explaining)</p><p>Steps of greedy algorithms are</p><ol><li>Be lazy</li><li>Search some lazy algorithms</li><li>Learn greedy algorithms lmao jkjkjk</li></ol><p>Basically all you have to do is be lazy</p><p>Ok heres an example cus idk how to explain</p><p>Im gonna make a question right now</p><p>uhh</p><p>Theres a tree, try to make the biggest number out of all the elements in the tree. You can assume that all bottom elements are linked to any above element (what am i saying) Input format:</p><p>Line 1: A single interger N (0&lt;=N&lt;=100) to determine the number of sub-groups in the tree</p><p>Lines 2-N+1: A single interger K (0&lt;=K&lt;=100) which is the number of elements in that sub-group of the tree</p><p>Output format:</p><p>A single interger, which is the biggest sum of each elements in each branch of the tree</p><p>Sample input:</p><pre><code>3

2 4 5

3 1 2 3

2 5 9
</code></pre><p>Sample output:</p><pre><code>17
</code></pre><p>This is because I took the biggest elements in each tree and added them together</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> n;</span></span>
<span class="line"><span style="color:#839496;">    cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">n;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;">[</span><span style="color:#D33682;">100</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> sum</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> i</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;i</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">n;</span><span style="color:#859900;">++</span><span style="color:#839496;">i){</span></span>
<span class="line"><span style="color:#839496;">         </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> k;</span></span>
<span class="line"><span style="color:#839496;">         cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">k;</span></span>
<span class="line"><span style="color:#839496;">         </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> maxi</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">         </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> j</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;j</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">k;</span><span style="color:#859900;">++</span><span style="color:#839496;">j){</span></span>
<span class="line"><span style="color:#839496;">            cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#268BD2;">x</span><span style="color:#839496;">[j];</span></span>
<span class="line"><span style="color:#839496;">            maxi</span><span style="color:#859900;">=</span><span style="color:#268BD2;">max</span><span style="color:#839496;">(maxi,</span><span style="color:#268BD2;">x</span><span style="color:#839496;">[j]);</span></span>
<span class="line"><span style="color:#839496;">         }</span></span>
<span class="line"><span style="color:#839496;">         sum</span><span style="color:#859900;">+=</span><span style="color:#839496;">maxi;</span></span>
<span class="line"><span style="color:#839496;">         maxi</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    cout</span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;">sum;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>Yes. Essentially this code just gets the maximum of each branch and adds them into one collective sum.</p>`,21);function e(p,o){return l}var c=n(a,[["render",e]]);export{c as default};
