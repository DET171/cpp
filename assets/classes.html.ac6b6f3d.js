import{_ as e,r as t,o as i,c,a,b as n,d as o,e as l}from"./app.9f193a06.js";const p={},r=l(`<h1 id="structs-and-classes" tabindex="-1"><a class="header-anchor" href="#structs-and-classes" aria-hidden="true">#</a> Structs and Classes</h1><h2 id="structs" tabindex="-1"><a class="header-anchor" href="#structs" aria-hidden="true">#</a> Structs</h2><p>Structs are a way to group several related variables into one &quot;datatype&quot;. Each variable in the struct is known as a <strong>member</strong> of the struct.</p><p>For example, this is a struct.</p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Pair but not a pair</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="this-initialises-a-struct-called-name-you-can-now-input-this-struct" tabindex="-1"><a class="header-anchor" href="#this-initialises-a-struct-called-name-you-can-now-input-this-struct" aria-hidden="true">#</a> This initialises a struct called name. You can now input this struct</h1><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This initialises a struct, <code>name</code>. Inputting a struct is based on its members:</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>7ac8da7f21030fc3703bf4ad29431246c01e11a0</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> name<span class="token punctuation">.</span>x <span class="token operator">&gt;&gt;</span> name<span class="token punctuation">.</span>y <span class="token operator">&gt;&gt;</span> name<span class="token punctuation">.</span>c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>or</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> HEAD
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="you-can-also-initialise-a-structs-as-a-data-structure-what-am-i-saying-it-is-a-data-structure" tabindex="-1"><a class="header-anchor" href="#you-can-also-initialise-a-structs-as-a-data-structure-what-am-i-saying-it-is-a-data-structure" aria-hidden="true">#</a> You can also initialise a structs as a data structure (what am i saying it is a data structure)</h1><p>scanf(&quot;%d %d %c&quot;, &amp;name.x, &amp;name.y, &amp;name.c);</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
Since a struct acts like a data type by itself, variables of that struct can be initialised:
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 7ac8da7f21030fc3703bf4ad29431246c01e11a0

\`\`\`cpp
int main() {
  // single variable
  name name1 = {0, 0, &#39;c&#39;};
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
  // array
=======
  // or an array of names!
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 7ac8da7f21030fc3703bf4ad29431246c01e11a0
  name s[n];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><h3 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h3><h1 id="idk-bro-go-ask-someone-else" tabindex="-1"><a class="header-anchor" href="#idk-bro-go-ask-someone-else" aria-hidden="true">#</a> idk bro go ask someone else</h1><h2 id="classes-1" tabindex="-1"><a class="header-anchor" href="#classes-1" aria-hidden="true">#</a> Classes</h2><p>A class is the building block of OOP in C++. While not widely used within the realm of CP, they are still important in other fields.</p><h3 id="what-are-they" tabindex="-1"><a class="header-anchor" href="#what-are-they" aria-hidden="true">#</a> What are they?</h3><p>Like structs, classes contain various member variables, but also contain member functions: functions specifically tailored to that datatype.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Cca</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  string name<span class="token punctuation">;</span>
  <span class="token keyword">int</span> members<span class="token punctuation">;</span>

  <span class="token comment">// printName is not defined inside class definition</span>
  <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// printMembers is defined inside the class definition</span>
  <span class="token keyword">void</span> <span class="token function">printMembers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Number of members: &quot;</span> <span class="token operator">&lt;&lt;</span> members<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// definition of member functions using scope resolution operator ::</span>
<span class="token keyword">void</span> <span class="token class-name">Cca</span><span class="token double-colon punctuation">::</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;CCA: &quot;</span> <span class="token operator">&lt;&lt;</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),u={href:"https://www.geeksforgeeks.org/c-classes-and-objects/",target:"_blank",rel:"noopener noreferrer"},d=a("blockquote",null,[a("blockquote",null,[a("blockquote",null,[a("blockquote",null,[a("blockquote",null,[a("blockquote",null,[a("blockquote",null,[a("p",null,"7ac8da7f21030fc3703bf4ad29431246c01e11a0")])])])])])])],-1);function m(k,v){const s=t("ExternalLinkIcon");return i(),c("div",null,[r,a("p",null,[n("More advanced concepts for classes, such as constructors and destructors, appear almost nowhere within competitive programming. Instead, you can read about them "),a("a",u,[n("here"),o(s)]),n(".")]),d])}const h=e(p,[["render",m],["__file","classes.html.vue"]]);export{h as default};
