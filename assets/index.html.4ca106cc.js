import{r as o,o as t,c as r,a as s,b as a,w as p,F as c,d as n,e as B}from"./app.d90cb63d.js";import{_ as y}from"./plugin-vue_export-helper.21dcd24c.js";const i={},F=s("h1",{id:"stl-data-structures-mostly-by-darren",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#stl-data-structures-mostly-by-darren","aria-hidden":"true"},"#"),n(" STL Data Structures (mostly by Darren)")],-1),A=s("p",null,"I'm going to talk about some data structures found in the standard library and how to implement them, along with a few useful functions you should probably know about.",-1),u={class:"table-of-contents"},b=n("Arrays"),m=n("Vectors"),D=n("Deque"),d=n("Stacks"),C=n("Queue"),h=n("Priority Queue"),E=n("Map"),f=n("Sets"),g=n("Final Notes"),k=B(`<h2 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays" aria-hidden="true">#</a> Arrays</h2><p>By far the simplest data structure you should probably know about is the array.</p><p>Arrays have:</p><ul><li>a fixed size (number of elements it can contain) <ul><li>no capability to erase / append elements</li></ul></li><li>elements with all the same datatypes</li></ul><p>Here&#39;s a short snippet showing what arrays can do:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;"> // defines an array of ints with size 5</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // sets the first element of the array to 1</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">57</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // sets the fourth element to 57</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	cin </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;"> // get the user to input the third element of the array</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // size of the array</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="vectors" tabindex="-1"><a class="header-anchor" href="#vectors" aria-hidden="true">#</a> Vectors</h2><p>Basically arrays with the capability to append elements (from the end) and pop elements from the back.</p><p>Erasing elements from anywhere in the vector is also allowed.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	vector</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> v;</span><span style="color:#7F848E;font-style:italic;"> // defines a vector of ints</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // appends 5 to the vector</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop_back</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // now what does the vector contain?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // size of the vector</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">back</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // first and last elements</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">v</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">());</span><span style="color:#7F848E;font-style:italic;"> // sorts the vector</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> i : v) cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // iterates through every element in the vector</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="deque" tabindex="-1"><a class="header-anchor" href="#deque" aria-hidden="true">#</a> Deque</h2><p>Pronounced &#39;deck&#39; or &#39;d-q&#39;, I don&#39;t give a damn about how it&#39;s pronounced.</p><p>It&#39;s a vector on steroids, allowing you to insert (from the front) and append (from the back) elements. It can also pop elements from the front &amp; back.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	deque</span><span style="color:#C678DD;">&lt;long&gt;</span><span style="color:#ABB2BF;"> d;</span><span style="color:#7F848E;font-style:italic;"> // creates a deque of long ints</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// gets the user to cin 5 elements and store them in the deque</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">; i</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">		cin </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_back</span><span style="color:#ABB2BF;">(a);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_front</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">55</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // now 55 is at the front</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// d.size(), d.front() and d.back() still work</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// sort(d.begin(), d.end() still works)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop_back</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop_front</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;oh bother there are only &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; elements left.&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="stacks" tabindex="-1"><a class="header-anchor" href="#stacks" aria-hidden="true">#</a> Stacks</h2><p>Stacks are basically stacks of <em>roti prata</em> (or your mountain of procrastinated homework).</p><p>You can only access the top element, and only erase the top element. (What kind of sick freak would take prata from the bottom of the stack)?</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	stack</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> s;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">69</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">top</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; is currently 1st place in kahoot</span><span style="color:#E5C07B;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;there are &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; players</span><span style="color:#E5C07B;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // check if the stack is empty, if not, keep popping!</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; more players left</span><span style="color:#E5C07B;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> Queue</h2><p>Like the perpetually long canteen queue in the HS Canteen during 1:30 pm lunch break, queues add elements from the back and pop elements from the front (in case you don&#39;t know how a real-life queue works).</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	queue</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> q;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#E5C07B;">\\n</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// quick way to see all the elements in the queue</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// NOTE: notice that only 1 occurrence of 4 is printed out, because a queue removes duplicate values</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="priority-queue" tabindex="-1"><a class="header-anchor" href="#priority-queue" aria-hidden="true">#</a> Priority Queue</h2><p>Like a queue, but the most popular boy is now at the end perpetually.</p><p>Priority queues sort the elements every time a new element is pushed in.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	priority_queue</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> pq;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pq</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pq</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">pq</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pq</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#E5C07B;">\\n</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// NOTE: notice that the elements are printed in ascending order!</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">pq</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">empty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pq</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">front</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><p>A map is a key-value data structure, with a key being linked to a value (can be different datatype).</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	map</span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;">string, </span><span style="color:#C678DD;">int&gt;</span><span style="color:#ABB2BF;"> m;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;yo&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;mom&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;so&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;fat&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">420</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;fat&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#E5C07B;">\\n</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#E5C07B;">\\n</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">pair</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;abc&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;"> // can also insert like this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// loop through key and value</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">auto</span><span style="color:#ABB2BF;"> itr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">marks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(); itr </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">marks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(); </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">itr) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		cout  </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">itr</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;: &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">itr</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">second</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;n&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="sets" tabindex="-1"><a class="header-anchor" href="#sets" aria-hidden="true">#</a> Sets</h2><p>A set is a more picky vector, it:</p><ul><li>removes duplicate values</li><li>sorts every time you insert an element</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	set</span><span style="color:#C678DD;">&lt;int&gt;</span><span style="color:#ABB2BF;"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">35</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">55</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	set&lt;</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">&gt;::iterator itr;</span><span style="color:#7F848E;font-style:italic;"> // defines an iterator of the set</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;this set weighs &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; kg</span><span style="color:#E5C07B;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// prints all the elements in the set</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (itr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(); itr </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(); s</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">itr </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">erase</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">begin</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">55</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;"> // remove 55</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// lower_bound() and upper_bound(): returns an iterator to the first element which is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// equal to OR before / after the element in the set</span></span>
<span class="line"><span style="color:#ABB2BF;">	cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lower_bound</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">upper_bound</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="final-notes" tabindex="-1"><a class="header-anchor" href="#final-notes" aria-hidden="true">#</a> Final Notes</h2><p>There are dozens of STL data structures out there, but these are the most popular ones.</p>`,34),q=n("Anyway I copied most of them from "),v={href:"https://www.geeksforgeeks.org",target:"_blank",rel:"noopener noreferrer"},_=n("https://www.geeksforgeeks.org"),w=n(".");function x(z,S){const l=o("RouterLink"),e=o("ExternalLinkIcon");return t(),r(c,null,[F,A,s("nav",u,[s("ul",null,[s("li",null,[a(l,{to:"#arrays"},{default:p(()=>[b]),_:1})]),s("li",null,[a(l,{to:"#vectors"},{default:p(()=>[m]),_:1})]),s("li",null,[a(l,{to:"#deque"},{default:p(()=>[D]),_:1})]),s("li",null,[a(l,{to:"#stacks"},{default:p(()=>[d]),_:1})]),s("li",null,[a(l,{to:"#queue"},{default:p(()=>[C]),_:1})]),s("li",null,[a(l,{to:"#priority-queue"},{default:p(()=>[h]),_:1})]),s("li",null,[a(l,{to:"#map"},{default:p(()=>[E]),_:1})]),s("li",null,[a(l,{to:"#sets"},{default:p(()=>[f]),_:1})]),s("li",null,[a(l,{to:"#final-notes"},{default:p(()=>[g]),_:1})])])]),k,s("p",null,[q,s("a",v,[_,a(e)]),w])],64)}var I=y(i,[["render",x]]);export{I as default};
