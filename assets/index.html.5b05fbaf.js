import{_ as h,r as i,o as m,c as k,a as s,d as a,w as n,b as t,e as d}from"./app.57b91a14.js";const _={},f=d(`<h1 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> syntax</h1><p>Syntax is the most essential to grasp to write a c++ program. Here is an overview.</p><h2 id="structure" tabindex="-1"><a class="header-anchor" href="#structure" aria-hidden="true">#</a> structure</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is a basic C++ program which prints &quot;Hello World&quot; to the console.</p><p>It is made up of three essential parts:</p><ol><li><code>#include</code>: includes the necessary header files for functions used in the program.</li><li><code>using namespace std</code>: includes the standard library of c++ functions.</li><li><code>int main() {}</code>: the main function, where all driver code should go.</li></ol><p><code>cout</code> is for standard output (i.e. &quot;printing&quot;), and <code>cin</code> is for receiving input to a variable defined earlier.</p><h2 id="datatypes" tabindex="-1"><a class="header-anchor" href="#datatypes" aria-hidden="true">#</a> datatypes</h2><p>variables can be thought of as &#39;containers&#39; for values, that can be changed and reused throughout a program. in c++, variables take one of many datatypes, shown below.</p><h3 id="basic-data-types" tabindex="-1"><a class="header-anchor" href="#basic-data-types" aria-hidden="true">#</a> Basic Data Types</h3>`,11),g=s("thead",null,[s("tr",null,[s("th",null,"Data Type"),s("th",null,"Size (in bytes)"),s("th",null,"Stores"),s("th",null,"Example")])],-1),v=s("td",null,[s("code",null,"int")],-1),b={class:"katex"},x={class:"katex-mathml"},w=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4")])],-1),y={class:"katex"},M={class:"katex-mathml"},q=d('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">2147483648</span></span></span>',1),L={class:"katex"},z={class:"katex-mathml"},D=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2147483647")])],-1),T={class:"katex"},E={class:"katex-mathml"},N=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"12442")])],-1),S=s("td",null,[s("code",null,"float")],-1),B={class:"katex"},C={class:"katex-mathml"},O=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4")])],-1),V={class:"katex"},A={class:"katex-mathml"},F=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"7")])],-1),H={class:"katex"},W={class:"katex-mathml"},P=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"5.63562")])],-1),j=s("td",null,[s("code",null,"double")],-1),I={class:"katex"},R={class:"katex-mathml"},$=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"8")])],-1),G={class:"katex"},J={class:"katex-mathml"},K=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"15")])],-1),Q={class:"katex"},U={class:"katex-mathml"},X=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3.1415926535879732")])],-1),Y=s("td",null,[s("code",null,"bool")],-1),Z={class:"katex"},ss={class:"katex-mathml"},as=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])],-1),ns=s("td",null,[s("code",null,"true"),t(" or "),s("code",null,"false"),t(" values")],-1),ts=s("td",null,[s("code",null,"true"),t(", "),s("code",null,"false")],-1),es=s("td",null,[s("code",null,"char")],-1),ls={class:"katex"},os={class:"katex-mathml"},ps=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])],-1),cs=s("td",null,"A single character",-1),is=s("td",null,[s("code",null,"'D'"),t(", "),s("code",null,"'$'")],-1),ds=s("tr",null,[s("td",null,[s("code",null,"string")]),s("td",null,"variable"),s("td",null,"Multi-character text"),s("td",null,[s("code",null,"'hi mom'")])],-1),us=s("h3",{id:"data-type-modifiers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#data-type-modifiers","aria-hidden":"true"},"#"),t(" Data Type Modifiers")],-1),rs=s("p",null,[t("these are most commonly used for numeric datatypes ("),s("code",null,"int"),t(" and "),s("code",null,"double"),t("), to resize their limits according to the program's requirements.")],-1),hs=s("p",null,[t("the default modified datatype is "),s("code",null,"int"),t(".")],-1),ms=s("thead",null,[s("tr",null,[s("th",null,"Modified Datatype"),s("th",null,"Size (in bytes)"),s("th",null,"Range")])],-1),ks=s("td",null,[s("code",null,"short")],-1),_s={class:"katex"},fs={class:"katex-mathml"},gs=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])],-1),vs={class:"katex"},bs={class:"katex-mathml"},xs=d('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">32768</span></span></span>',1),ws={class:"katex"},ys={class:"katex-mathml"},Ms=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"32767")])],-1),qs=s("td",null,[s("code",null,"unsigned short")],-1),Ls={class:"katex"},zs={class:"katex-mathml"},Ds=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])],-1),Ts={class:"katex"},Es={class:"katex-mathml"},Ns=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])],-1),Ss={class:"katex"},Bs={class:"katex-mathml"},Cs=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"65535")])],-1),Os=s("td",null,[s("code",null,"unsigned")],-1),Vs={class:"katex"},As={class:"katex-mathml"},Fs=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4")])],-1),Hs={class:"katex"},Ws={class:"katex-mathml"},Ps=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])],-1),js={class:"katex"},Is={class:"katex-mathml"},Rs=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4294967295")])],-1),$s=s("td",null,[s("code",null,"long")],-1),Gs={class:"katex"},Js={class:"katex-mathml"},Ks=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4")])],-1),Qs={class:"katex"},Us={class:"katex-mathml"},Xs=d('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">2147483648</span></span></span>',1),Ys={class:"katex"},Zs={class:"katex-mathml"},sa=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2147483647")])],-1),aa=s("td",null,[s("code",null,"unsigned long")],-1),na={class:"katex"},ta={class:"katex-mathml"},ea=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4")])],-1),la={class:"katex"},oa={class:"katex-mathml"},pa=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])],-1),ca={class:"katex"},ia={class:"katex-mathml"},da=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4294967295")])],-1),ua=s("td",null,[s("code",null,"long long")],-1),ra={class:"katex"},ha={class:"katex-mathml"},ma=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"8")])],-1),ka={class:"katex"},_a={class:"katex-mathml"},fa=d('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span></span></span>',1),ga={class:"katex"},va={class:"katex-mathml"},ba=d('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span>',1),xa=s("td",null,[s("code",null,"unsigned long long")],-1),wa={class:"katex"},ya={class:"katex-mathml"},Ma=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"8")])],-1),qa={class:"katex"},La={class:"katex-mathml"},za=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])],-1),Da={class:"katex"},Ta={class:"katex-mathml"},Ea=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"18446744073709551615")])],-1),Na=s("td",null,[s("code",null,"long double")],-1),Sa={class:"katex"},Ba={class:"katex-mathml"},Ca=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"12")])],-1),Oa=s("td",null,"-",-1),Va=d(`<h2 id="control-flow" tabindex="-1"><a class="header-anchor" href="#control-flow" aria-hidden="true">#</a> control flow</h2><p>a program can include logical statements, that control how the program behaves in differing conditions.</p><h3 id="if-statements" tabindex="-1"><a class="header-anchor" href="#if-statements" aria-hidden="true">#</a> if statements</h3><p>these can be thought of as asking yes/no questions to the computer.</p><p>if the answer is &#39;yes&#39;, something would happen; if &#39;no&#39;, something <strong>else</strong> would happen.</p><p>below is code that invites the user to a drink if 18 and over, or else denies access.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;enter your age: &quot;</span><span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;access denied&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;have a drink!&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>conditions in if-statements are surrounded by <strong>parentheses</strong> and the following code to be executed is in curly braces.</p><p>multiple conditions can be expressed with <code>else if</code>:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;enter your age: &quot;</span><span class="token punctuation">;</span>
  cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;you cannot drink nor smoke.&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;you can drink, but not smoke.&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;you can do both! welcome to adulthood!&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="logical-operators" tabindex="-1"><a class="header-anchor" href="#logical-operators" aria-hidden="true">#</a> Logical Operators</h4><p>if multiple conditions are to be satisfied, the following can be used.</p><table><thead><tr><th>Op.</th><th>Means</th><th>True Example</th><th>False Example</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>&quot;and&quot;</td><td><code>(5 &gt; 3 &amp;&amp; 2 &lt; 4)</code></td><td><code>(3 &gt; 5 &amp;&amp; 2 &lt; 4)</code></td></tr><tr><td><code>||</code></td><td>&quot;or&quot;</td><td><code>(&#39;s&#39; == &#39;s&#39; or &#39;t&#39; == &#39;u&#39;)</code></td><td><code>(&#39;s&#39; == &#39;t&#39; or &#39;t&#39; == &#39;u&#39;)</code></td></tr><tr><td><code>!</code></td><td>&quot;not&quot;</td><td><code>(!(5 &lt; 3))</code></td><td><code>(!(&#39;a&#39; == &#39;a&#39;))</code></td></tr></tbody></table><h4 id="comparison-operators" tabindex="-1"><a class="header-anchor" href="#comparison-operators" aria-hidden="true">#</a> Comparison Operators</h4><p>these are used inside conditions to compare values to one another, resulting in <code>true</code>/<code>false</code> return values.</p><table><thead><tr><th>Op.</th><th>Means</th><th>True Example</th></tr></thead><tbody><tr><td><code>==</code></td><td>is equal to</td><td><code>(5 == 5)</code></td></tr><tr><td><code>!=</code></td><td>is not equal to</td><td><code>(5 != 3)</code></td></tr><tr><td><code>&gt;</code></td><td>is greater than</td><td><code>(5 &gt; 3)</code></td></tr><tr><td><code>&gt;=</code></td><td>is greater than or equal to</td><td><code>(5 &gt;= 5)</code></td></tr><tr><td><code>&lt;</code></td><td>is smaller than</td><td><code>(3 &lt; 5)</code></td></tr><tr><td><code>&lt;=</code></td><td>is smaller than or equal to</td><td><code>(5 &lt;= 5)</code></td></tr></tbody></table><h3 id="loops" tabindex="-1"><a class="header-anchor" href="#loops" aria-hidden="true">#</a> Loops</h3><h4 id="for-loop" tabindex="-1"><a class="header-anchor" href="#for-loop" aria-hidden="true">#</a> For Loop</h4><p>say you wanted to repeat a block of code some number of times. writing the same block of code that many times would be tiresome, and it gets worse if the number of times to repeat it is determined by the user.</p><p>we can use for loops instead! a for-loop contains these three parts</p><ol><li>initialisation: initialise the counter variable to be used</li><li>condition: loop as long as the condition is true</li><li>increment/decrement: increment/decrement variables with every run of the loop</li></ol><p>any of these parts can be ommited.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//  initialize, cond., inc./dec.</span>
	<span class="token comment">//  output: 1 2 3 4 5 </span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token comment">//  output: 4 3 2 1</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="while-loop" tabindex="-1"><a class="header-anchor" href="#while-loop" aria-hidden="true">#</a> While Loop</h4><p>if you didn&#39;t have a certain number of times the loop should run, a loop can still run as long as certain condition(s) hold true.</p><p>the block of code inside the loop will repeat as long as the condition is true.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// put condition in parens.</span>
    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
    i<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	<span class="token comment">// output: 10 9 8 7 6 5 4 3 2 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><p>functions define a block of code to be reused throughout the program at different junctures.</p><p>you can think of these as variables but for blocks of code.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// function name, (parameters)</span>
<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// output: 6</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>normally, a function is expected to return a certain value after the operations inside have been completed. these values take the c++ datatypes we&#39;ve seen before:</p><ol><li><code>int</code> function</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>void</code> function</li></ol><p>this function returns nothing, and is normally used to modify existing variables.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">addAndPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">addAndPrint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>string</code> function</li></ol><p>returns a string.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>string <span class="token function">add</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">,</span> string c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ef&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// output: abcdef</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>bool</code> function</li></ol><p>returns a boolean value: <code>true</code> or <code>false</code>.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">&gt;</span> c<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>note: <em>the</em> <code>else</code> <em>keyword isn&#39;t needed here, because when</em> <code>return</code> <em>is called, the function ends, ignoring everything else after it.</em></p><p>alternatively,</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">&gt;</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>note: this function can still produce <code>true</code> or <code>false</code> results depending on the values of <code>a</code>, <code>b</code> and <code>c</code>.</p>`,47);function Aa(Fa,Ha){const e=i("mn"),l=i("mrow"),o=i("annotation"),p=i("semantics"),c=i("math"),u=i("mo"),r=i("msup");return m(),k("div",null,[f,s("table",null,[g,s("tbody",null,[s("tr",null,[v,s("td",null,[s("span",b,[s("span",x,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("4")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("4")]),_:1})]),_:1})]),_:1})]),w])]),s("td",null,[t("Numbers ("),s("span",y,[s("span",M,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(u,null,{default:n(()=>[t("−")]),_:1}),a(e,null,{default:n(()=>[t("2147483648")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("-2 147 483 648")]),_:1})]),_:1})]),_:1})]),q]),t(" to "),s("span",L,[s("span",z,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("2147483647")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("2 147 483 647")]),_:1})]),_:1})]),_:1})]),D]),t(")")]),s("td",null,[s("span",T,[s("span",E,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("12442")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("12 442")]),_:1})]),_:1})]),_:1})]),N])])]),s("tr",null,[S,s("td",null,[s("span",B,[s("span",C,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("4")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("4")]),_:1})]),_:1})]),_:1})]),O])]),s("td",null,[t("Decimal numbers (up to "),s("span",V,[s("span",A,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("7")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("7")]),_:1})]),_:1})]),_:1})]),F]),t(" d.p.)")]),s("td",null,[s("span",H,[s("span",W,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("5.63562")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("5.63562")]),_:1})]),_:1})]),_:1})]),P])])]),s("tr",null,[j,s("td",null,[s("span",I,[s("span",R,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("8")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("8")]),_:1})]),_:1})]),_:1})]),$])]),s("td",null,[t("Decimal numbers (up to "),s("span",G,[s("span",J,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("15")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("15")]),_:1})]),_:1})]),_:1})]),K]),t(" d.p.)")]),s("td",null,[s("span",Q,[s("span",U,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("3.1415926535879732")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("3.1415926535879732")]),_:1})]),_:1})]),_:1})]),X])])]),s("tr",null,[Y,s("td",null,[s("span",Z,[s("span",ss,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("1")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("1")]),_:1})]),_:1})]),_:1})]),as])]),ns,ts]),s("tr",null,[es,s("td",null,[s("span",ls,[s("span",os,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("1")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("1")]),_:1})]),_:1})]),_:1})]),ps])]),cs,is]),ds])]),us,rs,hs,s("table",null,[ms,s("tbody",null,[s("tr",null,[ks,s("td",null,[s("span",_s,[s("span",fs,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("2")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("2")]),_:1})]),_:1})]),_:1})]),gs])]),s("td",null,[s("span",vs,[s("span",bs,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(u,null,{default:n(()=>[t("−")]),_:1}),a(e,null,{default:n(()=>[t("32768")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("-32 768")]),_:1})]),_:1})]),_:1})]),xs]),t(" to "),s("span",ws,[s("span",ys,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("32767")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("32 767")]),_:1})]),_:1})]),_:1})]),Ms])])]),s("tr",null,[qs,s("td",null,[s("span",Ls,[s("span",zs,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("2")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("2")]),_:1})]),_:1})]),_:1})]),Ds])]),s("td",null,[s("span",Ts,[s("span",Es,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("0")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("0")]),_:1})]),_:1})]),_:1})]),Ns]),t(" to "),s("span",Ss,[s("span",Bs,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("65535")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("65 535")]),_:1})]),_:1})]),_:1})]),Cs])])]),s("tr",null,[Os,s("td",null,[s("span",Vs,[s("span",As,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("4")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("4")]),_:1})]),_:1})]),_:1})]),Fs])]),s("td",null,[s("span",Hs,[s("span",Ws,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("0")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("0")]),_:1})]),_:1})]),_:1})]),Ps]),t(" to "),s("span",js,[s("span",Is,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("4294967295")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("4 294 967 295")]),_:1})]),_:1})]),_:1})]),Rs])])]),s("tr",null,[$s,s("td",null,[s("span",Gs,[s("span",Js,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("4")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("4")]),_:1})]),_:1})]),_:1})]),Ks])]),s("td",null,[s("span",Qs,[s("span",Us,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(u,null,{default:n(()=>[t("−")]),_:1}),a(e,null,{default:n(()=>[t("2147483648")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("-2 147 483 648")]),_:1})]),_:1})]),_:1})]),Xs]),t(" to "),s("span",Ys,[s("span",Zs,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("2147483647")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("2 147 483 647")]),_:1})]),_:1})]),_:1})]),sa])])]),s("tr",null,[aa,s("td",null,[s("span",na,[s("span",ta,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("4")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("4")]),_:1})]),_:1})]),_:1})]),ea])]),s("td",null,[s("span",la,[s("span",oa,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("0")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("0")]),_:1})]),_:1})]),_:1})]),pa]),t(" to "),s("span",ca,[s("span",ia,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("4294967295")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("4 294 967 295")]),_:1})]),_:1})]),_:1})]),da])])]),s("tr",null,[ua,s("td",null,[s("span",ra,[s("span",ha,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("8")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("8")]),_:1})]),_:1})]),_:1})]),ma])]),s("td",null,[s("span",ka,[s("span",_a,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(u,null,{default:n(()=>[t("−")]),_:1}),a(r,null,{default:n(()=>[a(e,null,{default:n(()=>[t("2")]),_:1}),a(e,null,{default:n(()=>[t("63")]),_:1})]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("-2^{63}")]),_:1})]),_:1})]),_:1})]),fa]),t(" to "),s("span",ga,[s("span",va,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(r,null,{default:n(()=>[a(e,null,{default:n(()=>[t("2")]),_:1}),a(e,null,{default:n(()=>[t("63")]),_:1})]),_:1}),a(u,null,{default:n(()=>[t("−")]),_:1}),a(e,null,{default:n(()=>[t("1")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("2^{63} - 1")]),_:1})]),_:1})]),_:1})]),ba])])]),s("tr",null,[xa,s("td",null,[s("span",wa,[s("span",ya,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("8")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("8")]),_:1})]),_:1})]),_:1})]),Ma])]),s("td",null,[s("span",qa,[s("span",La,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("0")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("0")]),_:1})]),_:1})]),_:1})]),za]),t(" to "),s("span",Da,[s("span",Ta,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("18446744073709551615")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("18 446 744 073 709 551 615")]),_:1})]),_:1})]),_:1})]),Ea])])]),s("tr",null,[Na,s("td",null,[s("span",Sa,[s("span",Ba,[a(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(p,null,{default:n(()=>[a(l,null,{default:n(()=>[a(e,null,{default:n(()=>[t("12")]),_:1})]),_:1}),a(o,{encoding:"application/x-tex"},{default:n(()=>[t("12")]),_:1})]),_:1})]),_:1})]),Ca])]),Oa])])]),Va])}const Pa=h(_,[["render",Aa],["__file","index.html.vue"]]);export{Pa as default};
