import{d as s}from"./app.82eaaab6.js";import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";const a={},l=s(`<h1 id="graph-theory" tabindex="-1"><a class="header-anchor" href="#graph-theory" aria-hidden="true">#</a> Graph Theory</h1><p>Get ready bois</p><h2 id="graph-representation" tabindex="-1"><a class="header-anchor" href="#graph-representation" aria-hidden="true">#</a> Graph representation</h2><h3 id="adjacency-matrix" tabindex="-1"><a class="header-anchor" href="#adjacency-matrix" aria-hidden="true">#</a> Adjacency matrix</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">adjmatrix</span><span style="color:#839496;">[N][N];</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  //first perimeter stores node 1 and second perimeter stores node 2. Edge weight can then be stored in it.</span></span>
<span class="line"><span style="color:#839496;">  cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">node1</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">node2</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">weight;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">adjmatrix</span><span style="color:#839496;">[node1][node2]</span><span style="color:#859900;">=</span><span style="color:#839496;">weight;</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="adjacency-list" tabindex="-1"><a class="header-anchor" href="#adjacency-list" aria-hidden="true">#</a> Adjacency list</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#586E75;font-style:italic;">  //unweighted adjacency list</span></span>
<span class="line"><span style="color:#839496;">  vector</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">adjlist</span><span style="color:#839496;">[N];</span></span>
<span class="line"><span style="color:#839496;">  cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">node1</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">node2;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">adjlist</span><span style="color:#839496;">[node1].</span><span style="color:#268BD2;">push_back</span><span style="color:#839496;">(node2);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  //weighted adjacency list</span></span>
<span class="line"><span style="color:#839496;">  vector</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">pair</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;">,</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">adjlist</span><span style="color:#839496;">[N];</span></span>
<span class="line"><span style="color:#839496;">  cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">node1</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">node2</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">weight;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">adjlist</span><span style="color:#839496;">[node1].</span><span style="color:#268BD2;">push_back</span><span style="color:#839496;">({node2,weight});</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="edge-list" tabindex="-1"><a class="header-anchor" href="#edge-list" aria-hidden="true">#</a> Edge list</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#839496;">  pair</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;">,pair</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;">,</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;"> edgelist;</span></span>
<span class="line"><span style="color:#839496;">  cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">node1</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">node2</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">weight;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">edgelist</span><span style="color:#839496;">.</span><span style="color:#268BD2;">first</span><span style="color:#859900;">=</span><span style="color:#839496;">weight;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">edgelist</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">first</span><span style="color:#859900;">=</span><span style="color:#839496;">node1;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">edgelist</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#859900;">=</span><span style="color:#839496;">node2;</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="graph-traversing-algorithms" tabindex="-1"><a class="header-anchor" href="#graph-traversing-algorithms" aria-hidden="true">#</a> Graph traversing algorithms</h2><h2 id="unweighted-graph-traversal" tabindex="-1"><a class="header-anchor" href="#unweighted-graph-traversal" aria-hidden="true">#</a> Unweighted graph traversal</h2><h3 id="depth-first-search" tabindex="-1"><a class="header-anchor" href="#depth-first-search" aria-hidden="true">#</a> Depth-first search</h3><p>Go deep.</p><p>Essentially what DFS does is that it goes deeper and deeper (\u{1F480}) until it cannot go deeper anymore. Then, it backtracks and finds another node which it can look through.</p><p>Time complexity: O(V) (tree), O(V+E) (graph)</p><p>Here is a simple example of a DFS code:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#839496;">vector</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">adjlist</span><span style="color:#839496;">[N];</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">void</span><span style="color:#839496;"> </span><span style="color:#268BD2;">dfs</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> node){</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">auto</span><span style="color:#839496;"> it : </span><span style="color:#268BD2;">adjlist</span><span style="color:#839496;">[node]){</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">dfs</span><span style="color:#839496;">(it);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="breadth-first-search" tabindex="-1"><a class="header-anchor" href="#breadth-first-search" aria-hidden="true">#</a> Breadth-first search</h3><p>Go wide.</p><p>^^^ thats it</p><p>Time complexity: O(V+E) (adjlist), O(V^2) (adjmatrix)</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#839496;">queue</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">pair</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;">,</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;"> q;</span></span>
<span class="line"><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">({</span><span style="color:#D33682;">0</span><span style="color:#839496;">,</span><span style="color:#D33682;">0</span><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#859900;">while</span><span style="color:#839496;">(</span><span style="color:#859900;">!</span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">empty</span><span style="color:#839496;">()){</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">auto</span><span style="color:#839496;"> cur</span><span style="color:#859900;">=</span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">top</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pop</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  //cur will be the node you are traversing right now</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#268BD2;">adjlist</span><span style="color:#839496;">[</span><span style="color:#268BD2;">cur</span><span style="color:#839496;">.</span><span style="color:#268BD2;">first</span><span style="color:#839496;">][</span><span style="color:#268BD2;">cur</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">]);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="cycle-detection" tabindex="-1"><a class="header-anchor" href="#cycle-detection" aria-hidden="true">#</a> Cycle detection</h3><p>i put this here for fun</p><p>Ok heres Floyd&#39;s Tortoise and Hare algorithm:</p><p>Essentially what it does is it finds cycles in a tree. The hare will move twice as fact as the tortoise, and when they meet you have your answer.</p><p>Time complexity: O(V)</p><p>One classic example for using this is finding repeated elements in a read-only array</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">void</span><span style="color:#839496;"> </span><span style="color:#268BD2;">finddup</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> arr[])</span></span>
<span class="line"><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> tortoise </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[</span><span style="color:#D33682;">0</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> hare </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[</span><span style="color:#D33682;">0</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">while</span><span style="color:#839496;"> (</span><span style="color:#D33682;">1</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        tortoise </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[tortoise];</span></span>
<span class="line"><span style="color:#839496;">        hare </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[</span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[hare]];</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">if</span><span style="color:#839496;"> (tortoise </span><span style="color:#859900;">==</span><span style="color:#839496;"> hare)</span></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#859900;">break</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    tortoise </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[</span><span style="color:#D33682;">0</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">while</span><span style="color:#839496;"> (tortoise </span><span style="color:#859900;">!=</span><span style="color:#839496;"> hare) {</span></span>
<span class="line"><span style="color:#839496;">        tortoise </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[tortoise];</span></span>
<span class="line"><span style="color:#839496;">        hare </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[hare];</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> tortoise;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="weighted-graph-traversal" tabindex="-1"><a class="header-anchor" href="#weighted-graph-traversal" aria-hidden="true">#</a> Weighted graph traversal</h2><h3 id="dijkstra" tabindex="-1"><a class="header-anchor" href="#dijkstra" aria-hidden="true">#</a> Dijkstra</h3><p>This algorithm finds the shortest path from node 1 to essentially every other node.</p><p>Time complexity: O((V+E)logV)</p><p>Theres really not much to it so heres the code:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[</span><span style="color:#D33682;">0</span><span style="color:#839496;">]</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">while</span><span style="color:#839496;">(</span><span style="color:#268BD2;">p</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">()){</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> w</span><span style="color:#859900;">=</span><span style="color:#268BD2;">p</span><span style="color:#839496;">.</span><span style="color:#268BD2;">top</span><span style="color:#839496;">().</span><span style="color:#268BD2;">first</span><span style="color:#839496;">,node</span><span style="color:#859900;">=</span><span style="color:#268BD2;">p</span><span style="color:#839496;">.</span><span style="color:#268BD2;">top</span><span style="color:#839496;">().</span><span style="color:#268BD2;">second</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">p</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pop</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">vis</span><span style="color:#839496;">[node]) </span><span style="color:#859900;">continue</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">vis</span><span style="color:#839496;">[node]</span><span style="color:#859900;">=</span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">auto</span><span style="color:#839496;"> it : </span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[node]){</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[node]</span><span style="color:#859900;">+</span><span style="color:#268BD2;">it</span><span style="color:#839496;">.</span><span style="color:#268BD2;">first</span><span style="color:#859900;">&lt;</span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[</span><span style="color:#268BD2;">it</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">]){</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[</span><span style="color:#268BD2;">it</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">]</span><span style="color:#859900;">=</span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[node]</span><span style="color:#859900;">+</span><span style="color:#268BD2;">it</span><span style="color:#839496;">.</span><span style="color:#268BD2;">first</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">p</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">({</span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[</span><span style="color:#268BD2;">it</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">],</span><span style="color:#268BD2;">it</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  cout</span><span style="color:#859900;">&lt;&lt;</span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[V</span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">];</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="floyd-warshall-algorithm" tabindex="-1"><a class="header-anchor" href="#floyd-warshall-algorithm" aria-hidden="true">#</a> Floyd-Warshall algorithm</h3><p>This algorithm finds the shortest path between any node.</p><p>Time complexity: O(V^3)</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> k </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">; k </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> V; k</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> i </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">; i </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> V; i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> j </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">; j </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> V; j</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[i][j] </span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[i][k] </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[k][j]) </span><span style="color:#859900;">&amp;&amp;</span></span>
<span class="line"><span style="color:#839496;">            (</span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[k][j] </span><span style="color:#859900;">!=</span><span style="color:#839496;"> INT_MAX </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[i][k] </span><span style="color:#859900;">!=</span><span style="color:#839496;"> INT_MAX))</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[i][j] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[i][k] </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">dist</span><span style="color:#839496;">[k][j];</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="misc" tabindex="-1"><a class="header-anchor" href="#misc" aria-hidden="true">#</a> Misc.</h2><h3 id="union-find-disjoint-set-ufds" tabindex="-1"><a class="header-anchor" href="#union-find-disjoint-set-ufds" aria-hidden="true">#</a> Union find disjoint set (UFDS)</h3><p>What this does it that it stores the parents of nodes in a tree/graph</p><p>In a UFDS, there usually are 3 functions: find, same, and merge</p><p>Find: finds the parent of specified node</p><p>Same: checks if the parents of 2 nodes are the same</p><p>Merge: Node A is now node B&#39;s child</p><p>Heres a complete UFDS code:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">P</span><span style="color:#839496;">[</span><span style="color:#D33682;">1000001</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> x){</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x] </span><span style="color:#859900;">==</span><span style="color:#839496;"> x){</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> x;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">else</span><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(</span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x]);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x];</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">bool</span><span style="color:#839496;"> </span><span style="color:#268BD2;">same</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> x, </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> y){</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(x) </span><span style="color:#859900;">==</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(y);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">void</span><span style="color:#839496;"> </span><span style="color:#268BD2;">merge</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> x, </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> y){</span></span>
<span class="line"><span style="color:#839496;">  x </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(x);</span></span>
<span class="line"><span style="color:#839496;">  y </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(y);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x] </span><span style="color:#859900;">=</span><span style="color:#839496;"> y;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="minimum-spanning-tree" tabindex="-1"><a class="header-anchor" href="#minimum-spanning-tree" aria-hidden="true">#</a> Minimum spanning tree</h3><p>An MST tells us the shortest path that connects all the nodes in a tree (woooo)</p><p>Heres Kruskal&#39;s MST, one block of code must be coded out.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#839496;">pair</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">ll, pair</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">ll, ll</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">w</span><span style="color:#839496;">[k];</span></span>
<span class="line"><span style="color:#268BD2;">sort</span><span style="color:#839496;">(w, w </span><span style="color:#859900;">+</span><span style="color:#839496;"> k);</span></span>
<span class="line"><span style="color:#839496;">ll l </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">, m </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">, cnt </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">while</span><span style="color:#839496;"> (l </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> k </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> cnt </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> n</span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">	ll a </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(</span><span style="color:#268BD2;">w</span><span style="color:#839496;">[l].</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">first</span><span style="color:#839496;">), b </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(</span><span style="color:#268BD2;">w</span><span style="color:#839496;">[l].</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">	</span><span style="color:#859900;">if</span><span style="color:#839496;"> (a </span><span style="color:#859900;">!=</span><span style="color:#839496;"> b) {</span></span>
<span class="line"><span style="color:#839496;">m </span><span style="color:#859900;">+=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">w</span><span style="color:#839496;">[l].</span><span style="color:#268BD2;">first</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">		</span><span style="color:#268BD2;">merge</span><span style="color:#839496;">(a, b);</span></span>
<span class="line"><span style="color:#839496;">		cnt</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">	}</span></span>
<span class="line"><span style="color:#839496;">	l</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>If you found anything familar here good for you becuse find and merge are both from UFDS. Now you need to code a UFDS to do this \u{1F603}</p><p>Another thing you may have noticed is the edge list. Use it for MST ONLY.</p><p>Here is a full MST:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#586E75;font-style:italic;">//edge list</span></span>
<span class="line"><span style="color:#839496;">pair</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;">,pair</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;">,</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[</span><span style="color:#D33682;">1000001</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//parent array</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">P</span><span style="color:#839496;">[</span><span style="color:#D33682;">1000001</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//functions</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> x){</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x] </span><span style="color:#859900;">==</span><span style="color:#839496;"> x){</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> x;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">else</span><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(</span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x]);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x];</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">bool</span><span style="color:#839496;"> </span><span style="color:#268BD2;">same</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> x, </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> y){</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(x) </span><span style="color:#859900;">==</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(y);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">void</span><span style="color:#839496;"> </span><span style="color:#268BD2;">join</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> x, </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> y){</span></span>
<span class="line"><span style="color:#839496;">  x </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(x);</span></span>
<span class="line"><span style="color:#839496;">  y </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">find</span><span style="color:#839496;">(y);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">P</span><span style="color:#839496;">[x] </span><span style="color:#859900;">=</span><span style="color:#839496;"> y;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  //initializing parent array</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> i</span><span style="color:#859900;">=</span><span style="color:#D33682;">1</span><span style="color:#839496;">; i</span><span style="color:#859900;">&lt;=</span><span style="color:#839496;">n; i</span><span style="color:#859900;">++</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">P</span><span style="color:#839496;">[i] </span><span style="color:#859900;">=</span><span style="color:#839496;"> i;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  //input edge list</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> i</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;i</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">e;</span><span style="color:#859900;">++</span><span style="color:#839496;">i){</span></span>
<span class="line"><span style="color:#839496;">    cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[i].</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">first</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[i].</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[i].</span><span style="color:#268BD2;">first</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  //mst :)</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">sort</span><span style="color:#839496;">(adj,adj</span><span style="color:#859900;">+</span><span style="color:#839496;">e);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> i</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">; i</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">e; i</span><span style="color:#859900;">++</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#859900;">!</span><span style="color:#268BD2;">same</span><span style="color:#839496;">(</span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[i].</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">first</span><span style="color:#839496;">, </span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[i].</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">)){</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">join</span><span style="color:#839496;">(</span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[i].</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">first</span><span style="color:#839496;">,</span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[i].</span><span style="color:#268BD2;">second</span><span style="color:#839496;">.</span><span style="color:#268BD2;">second</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">same</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">, n)){</span></span>
<span class="line"><span style="color:#839496;">        cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">adj</span><span style="color:#839496;">[i].</span><span style="color:#268BD2;">first</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div>`,56);function p(o,e){return l}var c=n(a,[["render",p]]);export{c as default};
