import{d as s}from"./app.3f17e310.js";import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";const a={},l=s(`<h1 id="bubble-sort" tabindex="-1"><a class="header-anchor" href="#bubble-sort" aria-hidden="true">#</a> Bubble Sort</h1><p>Bubble Sort is a sorting algorithm that compares two adjacent elements and swaps them until they are in the intended order.</p><p>Just like the movement of air bubbles in the water that rise up to the surface, each element of the array move to the end in each iteration. Therefore, it is called bubble sort. It is one of the simplest sorting algorithms.</p><table><thead><tr><th>Cases</th><th>Time</th></tr></thead><tbody><tr><td>Worst-Case Time Complexity</td><td><code>O(n^2)</code>. Worst case occurs when array is reverse sorted.</td></tr><tr><td>Best-Case Time Complexity</td><td><code>O(n)</code>. Best case occurs when array is already sorted.</td></tr><tr><td>Auxiliary Space</td><td><code>O(1)</code></td></tr><tr><td>Boundary Cases</td><td>Bubble sort takes minimum time (order of n) when elements are already sorted.</td></tr></tbody></table><table><thead><tr><th>Property</th><th>\u2705/\u274C</th></tr></thead><tbody><tr><td>Sorting In Place</td><td>\u2705</td></tr><tr><td>Stable</td><td>\u2705</td></tr></tbody></table><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#586E75;font-style:italic;">/* Code for bubble sort */</span></span>
<span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">void</span><span style="color:#839496;"> </span><span style="color:#268BD2;">swap</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">*</span><span style="color:#839496;">xp, </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">*</span><span style="color:#839496;">yp) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> temp </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">*</span><span style="color:#839496;">xp;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">*</span><span style="color:#839496;">xp </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">*</span><span style="color:#839496;">yp;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">*</span><span style="color:#839496;">yp </span><span style="color:#859900;">=</span><span style="color:#839496;"> temp;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// An optimized version of Bubble Sort</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">void</span><span style="color:#839496;"> </span><span style="color:#268BD2;">bubbleSort</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> arr[], </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> n) {</span></span>
<span class="line"><span style="color:#839496;">   </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> i, j;</span></span>
<span class="line"><span style="color:#839496;">   </span><span style="color:#93A1A1;font-weight:bold;">bool</span><span style="color:#839496;"> swapped;</span></span>
<span class="line"><span style="color:#839496;">   </span><span style="color:#859900;">for</span><span style="color:#839496;"> (i </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">; i </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> n </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">; i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">     swapped </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">     </span><span style="color:#859900;">for</span><span style="color:#839496;"> (j </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">; j </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> n </span><span style="color:#859900;">-</span><span style="color:#839496;"> i </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">; j</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[j] </span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[j</span><span style="color:#859900;">+</span><span style="color:#D33682;">1</span><span style="color:#839496;">]) {</span></span>
<span class="line"><span style="color:#839496;">           </span><span style="color:#268BD2;">swap</span><span style="color:#839496;">(</span><span style="color:#859900;">&amp;</span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[j], </span><span style="color:#859900;">&amp;</span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[j</span><span style="color:#859900;">+</span><span style="color:#D33682;">1</span><span style="color:#839496;">]);</span></span>
<span class="line"><span style="color:#839496;">           swapped </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        }</span></span>
<span class="line"><span style="color:#839496;">     }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">     // IF no two elements were swapped by inner loop, then break</span></span>
<span class="line"><span style="color:#839496;">     </span><span style="color:#859900;">if</span><span style="color:#839496;"> (swapped </span><span style="color:#859900;">==</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">break</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">   }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>`,7);function p(e,o){return l}var c=n(a,[["render",p]]);export{c as default};
