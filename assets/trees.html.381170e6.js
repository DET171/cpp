import{_ as n,o as s,c as a,e as p}from"./app.1ce64d34.js";const t={},o=p(`<h1 id="data-strutures" tabindex="-1"><a class="header-anchor" href="#data-strutures" aria-hidden="true">#</a> Data Strutures</h1><p>Skip this if your brain cells got murdered in the graph theory section</p><h2 id="fenwick-tree" tabindex="-1"><a class="header-anchor" href="#fenwick-tree" aria-hidden="true">#</a> Fenwick Tree</h2><h3 id="fenwick-tree-explained" tabindex="-1"><a class="header-anchor" href="#fenwick-tree-explained" aria-hidden="true">#</a> Fenwick Tree explained</h3><p>Finds range sum in O(log(N)) time instead of O(N)</p><p>BUT WAIT!!! CANT YOU DO THAT WITH PREFIX SUM??? EVEN THATS FASTER!!!</p><p>Lol no what if you need to update?</p><p>Fenwick tree supports point update and range update ðŸ˜ƒ</p><p>A Fenwick Tree is also called a binary-indexed tree.</p><p>So how a Fenwick Tree works is it covers ranges in the array <em>binarily</em> (i made that up)</p><p>Imagine a tree, but the parent node spans from the leftmost node to the middle node. Then, the 2 nodes after that spans half as much as the first one</p><p>To show this, lets say we plot it out</p><p>1111111100000000</p><p>2222000022220000</p><p>Where 1 represents the parent node and 2 represents the child of the parent. If this keeps on going, you will get this:</p><p>0000000000000000</p><p>1111111100000000</p><p>2222000022220000</p><p>3300330033003300</p><p>4040404040404040</p><p>So how does it get range sum now?</p><p>You can see that if you want to get the range sum of nodes 1-8, you can just take the entire segment of 1s</p><p>If you want to get the range sum of 1-5, you can take the 4 2s + the third 4</p><p>So on and so forth</p><h3 id="point-update-fenwick-tree" tabindex="-1"><a class="header-anchor" href="#point-update-fenwick-tree" aria-hidden="true">#</a> Point update Fenwick Tree</h3><p>This can only update one point at a time and get range sums:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> fw<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> x<span class="token operator">+=</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> fw<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> x<span class="token punctuation">;</span> x<span class="token operator">-=</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> fw<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="range-update-fenwick-tree" tabindex="-1"><a class="header-anchor" href="#range-update-fenwick-tree" aria-hidden="true">#</a> Range update Fenwick Tree</h3><p>This can update ranges at a time, using 2 Fenwick Trees:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> fw<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> fw2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//inclusive</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tx<span class="token operator">=</span>x<span class="token punctuation">;</span> tx <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> tx <span class="token operator">+=</span> tx<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>tx<span class="token punctuation">)</span><span class="token punctuation">)</span> fw<span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">,</span> fw2<span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">-=</span> v<span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ty<span class="token operator">=</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> ty <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> ty <span class="token operator">+=</span> ty<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">)</span> fw<span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">-=</span> v<span class="token punctuation">,</span> fw2<span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token operator">*</span>y<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> tx<span class="token operator">=</span>x<span class="token punctuation">;</span> tx<span class="token punctuation">;</span> tx <span class="token operator">-=</span> tx<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>tx<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> fw<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token operator">*</span>x <span class="token operator">+</span> fw2<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">range_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//inclusive</span>
    <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="segment-tree" tabindex="-1"><a class="header-anchor" href="#segment-tree" aria-hidden="true">#</a> Segment Tree</h2><p>I warned you</p><h3 id="segment-tree-explained" tabindex="-1"><a class="header-anchor" href="#segment-tree-explained" aria-hidden="true">#</a> Segment tree explained</h3><p>Just an advanced fenwick tree lmao</p><p>But it supports much more, like range set, range add, range min, range max.</p><p>Something very special about segment tree is something called lazy node creation and lazy propagation.</p><p>Now what exactly is a lazy node creation?</p><h3 id="lazy-node-creation" tabindex="-1"><a class="header-anchor" href="#lazy-node-creation" aria-hidden="true">#</a> Lazy node creation</h3><p>It only creates nodes in the tree if it absolutely needs to.</p><p>Now that was easy. Whats lazy propagation?</p><h3 id="lazy-propagation" tabindex="-1"><a class="header-anchor" href="#lazy-propagation" aria-hidden="true">#</a> Lazy propagation</h3><p>It only updates nodes if it is within range of the specified node. Else it will not update anything.</p><h3 id="initializing-the-struct" tabindex="-1"><a class="header-anchor" href="#initializing-the-struct" aria-hidden="true">#</a> Initializing the struct</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> s<span class="token punctuation">,</span> e<span class="token punctuation">;</span>
ll mn<span class="token punctuation">,</span> mx<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>
<span class="token keyword">bool</span> lset<span class="token punctuation">;</span>
ll add_val<span class="token punctuation">,</span> set_val<span class="token punctuation">;</span>
node <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>
<span class="token function">node</span> <span class="token punctuation">(</span><span class="token keyword">int</span> _s<span class="token punctuation">,</span> <span class="token keyword">int</span> _e<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">s</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">e</span><span class="token punctuation">(</span>_e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mx</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add_val</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">set_val</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">l</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> e<span class="token punctuation">)</span> mn <span class="token operator">=</span> mx <span class="token operator">=</span> sum <span class="token operator">=</span> A<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">combine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lazy-propagation-1" tabindex="-1"><a class="header-anchor" href="#lazy-propagation-1" aria-hidden="true">#</a> Lazy propagation</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token keyword">void</span> <span class="token function">self_set</span><span class="token punctuation">(</span>ll v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        mn <span class="token operator">=</span> mx <span class="token operator">=</span> set_val <span class="token operator">=</span> v<span class="token punctuation">;</span>
        sum <span class="token operator">=</span> v <span class="token operator">*</span> <span class="token punctuation">(</span>e<span class="token operator">-</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">self_add</span><span class="token punctuation">(</span>ll v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lset<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">self_set</span><span class="token punctuation">(</span>v <span class="token operator">+</span> set_val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        mn <span class="token operator">+=</span> v<span class="token punctuation">,</span> mx <span class="token operator">+=</span> v<span class="token punctuation">,</span> add_val <span class="token operator">+=</span> v<span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> v<span class="token operator">*</span><span class="token punctuation">(</span>e<span class="token operator">-</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">lazy_propagate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            l<span class="token operator">-&gt;</span><span class="token function">self_set</span><span class="token punctuation">(</span>set_val<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span><span class="token function">self_set</span><span class="token punctuation">(</span>set_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lset <span class="token operator">=</span> set_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
        <span class="token keyword">if</span> <span class="token punctuation">(</span>add_val <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            l<span class="token operator">-&gt;</span><span class="token function">self_add</span><span class="token punctuation">(</span>add_val<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span><span class="token function">self_add</span><span class="token punctuation">(</span>add_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            add_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="range-sum" tabindex="-1"><a class="header-anchor" href="#range-sum" aria-hidden="true">#</a> Range sum</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ll <span class="token function">range_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> lset<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token punctuation">(</span>e<span class="token operator">-</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">lazy_propagate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token operator">-&gt;</span><span class="token function">range_sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> r<span class="token operator">-&gt;</span><span class="token function">range_sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> l<span class="token operator">-&gt;</span><span class="token function">range_sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token operator">-&gt;</span><span class="token function">range_sum</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="range-update" tabindex="-1"><a class="header-anchor" href="#range-update" aria-hidden="true">#</a> Range update</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> ll v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">self_add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">create_children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lazy_propagate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> l<span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> r<span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">combine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="all-in-one-segment-tree" tabindex="-1"><a class="header-anchor" href="#all-in-one-segment-tree" aria-hidden="true">#</a> All in one segment tree</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> s<span class="token punctuation">,</span> e<span class="token punctuation">;</span>
    ll mn<span class="token punctuation">,</span> mx<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> lset<span class="token punctuation">;</span>
    ll add_val<span class="token punctuation">,</span> set_val<span class="token punctuation">;</span>
    node <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>
    <span class="token function">node</span> <span class="token punctuation">(</span><span class="token keyword">int</span> _s<span class="token punctuation">,</span> <span class="token keyword">int</span> _e<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">s</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">e</span><span class="token punctuation">(</span>_e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mx</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add_val</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">set_val</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">l</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> e<span class="token punctuation">)</span> mn <span class="token operator">=</span> mx <span class="token operator">=</span> sum <span class="token operator">=</span> A<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">combine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">create_children</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
        l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">self_set</span><span class="token punctuation">(</span>ll v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        mn <span class="token operator">=</span> mx <span class="token operator">=</span> set_val <span class="token operator">=</span> v<span class="token punctuation">;</span>
        sum <span class="token operator">=</span> v <span class="token operator">*</span> <span class="token punctuation">(</span>e<span class="token operator">-</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">self_add</span><span class="token punctuation">(</span>ll v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lset<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">self_set</span><span class="token punctuation">(</span>v <span class="token operator">+</span> set_val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        mn <span class="token operator">+=</span> v<span class="token punctuation">,</span> mx <span class="token operator">+=</span> v<span class="token punctuation">,</span> add_val <span class="token operator">+=</span> v<span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> v<span class="token operator">*</span><span class="token punctuation">(</span>e<span class="token operator">-</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">lazy_propagate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            l<span class="token operator">-&gt;</span><span class="token function">self_set</span><span class="token punctuation">(</span>set_val<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span><span class="token function">self_set</span><span class="token punctuation">(</span>set_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lset <span class="token operator">=</span> set_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
        <span class="token keyword">if</span> <span class="token punctuation">(</span>add_val <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            l<span class="token operator">-&gt;</span><span class="token function">self_add</span><span class="token punctuation">(</span>add_val<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span><span class="token function">self_add</span><span class="token punctuation">(</span>add_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            add_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        sum <span class="token operator">=</span> l<span class="token operator">-&gt;</span>sum <span class="token operator">+</span> r<span class="token operator">-&gt;</span>sum<span class="token punctuation">;</span>
        mn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>mn<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>mn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token operator">-&gt;</span>mx<span class="token punctuation">,</span> r<span class="token operator">-&gt;</span>mx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> ll v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">self_add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">create_children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lazy_propagate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> l<span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> r<span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">combine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> ll v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">self_set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">create_children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lazy_propagate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> l<span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> r<span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">combine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll <span class="token function">range_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> lset<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token punctuation">(</span>e<span class="token operator">-</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">lazy_propagate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token operator">-&gt;</span><span class="token function">range_sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> r<span class="token operator">-&gt;</span><span class="token function">range_sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l<span class="token operator">-&gt;</span><span class="token function">range_sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token operator">-&gt;</span><span class="token function">range_sum</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll <span class="token function">range_min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> mn<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> lset<span class="token punctuation">)</span> <span class="token keyword">return</span> mn<span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">lazy_propagate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token operator">-&gt;</span><span class="token function">range_min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> r<span class="token operator">-&gt;</span><span class="token function">range_min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>l<span class="token operator">-&gt;</span><span class="token function">range_min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span><span class="token function">range_min</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll <span class="token function">range_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> mx<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> lset<span class="token punctuation">)</span> <span class="token keyword">return</span> mx<span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">lazy_propagate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token operator">-&gt;</span><span class="token function">range_max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> r<span class="token operator">-&gt;</span><span class="token function">range_max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token operator">-&gt;</span><span class="token function">range_max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">-&gt;</span><span class="token function">range_max</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">delete</span> l<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">delete</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I ripped everything off of noiref go check it out</p><h2 id="fenwick-vs-segment" tabindex="-1"><a class="header-anchor" href="#fenwick-vs-segment" aria-hidden="true">#</a> Fenwick vs Segment</h2><table><thead><tr><th>Factor\\DS</th><th>Fenwick Tree</th><th>Segment tree</th></tr></thead><tbody><tr><td>O(log(N))</td><td>Fast log(N)</td><td>Slow log(N)</td></tr><tr><td>Functions</td><td>Less functions</td><td>More functions</td></tr><tr><td>Memory</td><td>Less memory</td><td>More memory</td></tr><tr><td>Preprocessing time</td><td>O(Nlog(N))</td><td>O(N)</td></tr><tr><td>Code length</td><td>Short and elegant</td><td>Super long ðŸ’€</td></tr></tbody></table>`,55),e=[o];function c(l,u){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","trees.html.vue"]]);export{k as default};
