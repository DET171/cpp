import{_ as m,r as t,o as h,c as v,a as n,b as s,d as a,w as e,e as c}from"./app.fb7106bd.js";const b={},y=n("h1",{id:"binary-search",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#binary-search","aria-hidden":"true"},"#"),s(" Binary Search")],-1),w=n("h2",{id:"binary-search-explained",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#binary-search-explained","aria-hidden":"true"},"#"),s(" Binary Search Explained")],-1),_=n("p",null,"Binary Search is a searching algorithm used in a sorted array by repeatedly dividing the search interval in half.",-1),g={class:"katex"},f={class:"katex-mathml"},x=c('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose">)</span></span></span>',1),S=n("p",null,"The basic steps to perform Binary Search are:",-1),B=n("ol",null,[n("li",null,"Begin with an interval covering the whole array."),n("li",null,"If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half."),n("li",null,"Otherwise, narrow it to the upper half."),n("li",null,"Go back to Step 2 until the value is found or the interval is empty.")],-1),I=n("p",null,[n("img",{src:"https://www.geeksforgeeks.org/wp-content/uploads/Binary-Search.png",alt:"binary search"}),n("em",null,"Image from GeeksforGeeks")],-1),T=n("h2",{id:"implementation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implementation","aria-hidden":"true"},"#"),s(" Implementation")],-1),L=n("code",null,"<algorithm>",-1),O=n("code",null,"std::binary_search",-1),R={href:"https://en.cppreference.com/w/cpp/algorithm/binary_search",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"Ok. I get it. You just feel restless and geeky and want to write your own Binary Search function.",-1),E={class:"custom-container details"},N=c(`<summary>Code</summary><p>Here you go nerds:</p><h3 id="iteration-method" tabindex="-1"><a class="header-anchor" href="#iteration-method" aria-hidden="true">#</a> Iteration method</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Binary Search in C++</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// Repeat until the pointers low and high meet each other</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>
      <span class="token keyword">return</span> mid<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span>
      low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">else</span>
      high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recursive-method" tabindex="-1"><a class="header-anchor" href="#recursive-method" aria-hidden="true">#</a> Recursive method</h3>`,5),V=c(`<p>Recursion is basically running a code again and again until you get the desired results. For example:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">meg</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> peaches<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> peaches<span class="token punctuation">;</span>
	peaches<span class="token operator">=</span><span class="token punctuation">(</span>peaches<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">meg</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>peaches<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> peaches<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token function">meg</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>peaches<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is a recursive binary search algorithm</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">&gt;=</span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token comment">// If found at mid, then return it</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>
      <span class="token keyword">return</span> mid<span class="token punctuation">;</span>

    <span class="token comment">// Search the left half</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> x<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Search the right half</span>
    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> x<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function G(M,Y){const p=t("mi"),o=t("mo"),i=t("mrow"),l=t("annotation"),r=t("semantics"),u=t("math"),d=t("ExternalLinkIcon"),k=t("RouterLink");return h(),v("div",null,[y,w,_,n("p",null,[s("The idea of binary search is to use the information that the array is sorted and reduce the time complexity to "),n("span",g,[n("span",f,[a(u,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:e(()=>[a(r,null,{default:e(()=>[a(i,null,{default:e(()=>[a(p,{mathvariant:"script"},{default:e(()=>[s("O")]),_:1}),a(o,{stretchy:"false"},{default:e(()=>[s("(")]),_:1}),a(p,null,{default:e(()=>[s("log")]),_:1}),a(o,null,{default:e(()=>[s("⁡")]),_:1}),a(p,null,{default:e(()=>[s("n")]),_:1}),a(o,{stretchy:"false"},{default:e(()=>[s(")")]),_:1})]),_:1}),a(l,{encoding:"application/x-tex"},{default:e(()=>[s("\\mathcal{O}(\\log{n})")]),_:1})]),_:1})]),_:1})]),x]),s(".")]),S,B,I,T,n("p",null,[s("There's... actually a built-in function defined in header "),L,s(" ("),O,s("). There's really no need to write your own. You can read more about it "),n("a",R,[s("here"),a(d)]),s(".")]),C,n("details",E,[N,n("p",null,[s("This uses recursive functions, so you might want to go take a look at "),a(k,{to:"/guide/more-adv/rf.html"},{default:e(()=>[s("this")]),_:1}),s(".")]),V])])}const F=m(b,[["render",G],["__file","bs.html.vue"]]);export{F as default};
