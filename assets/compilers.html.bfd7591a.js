import{_ as t,r as l,o,c as d,a as n,b as a,d as s,e as i}from"./app.c4d549bc.js";const r="/whichg++.gif",c={},u=i(`<h1 id="running-code" tabindex="-1"><a class="header-anchor" href="#running-code" aria-hidden="true">#</a> Running Code</h1><h2 id="running-code-locally" tabindex="-1"><a class="header-anchor" href="#running-code-locally" aria-hidden="true">#</a> Running Code Locally</h2><p>You need a compiler to be able to compile C++ programs and run them on your computer. You can either google for installation instructions, or continue reading ⬇️.</p><h3 id="installing-gcc-on-linux" tabindex="-1"><a class="header-anchor" href="#installing-gcc-on-linux" aria-hidden="true">#</a> Installing GCC on Linux</h3><p>If you&#39;re a chad Linux user, GCC should have been installed by default. To check, run the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">which</span> g++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you have <code>g++</code> installed, you should see something like this: <img src="`+r+`" alt="GCC installed"> If you get <code>g++ not found</code>, you can either install it with your distro&#39;s package manager or build it from source.</p><details class="custom-container details"><summary>Installation instructions for certain distros</summary><h5 id="ubuntu" tabindex="-1"><a class="header-anchor" href="#ubuntu" aria-hidden="true">#</a> Ubuntu</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="arch-linux" tabindex="-1"><a class="header-anchor" href="#arch-linux" aria-hidden="true">#</a> Arch Linux</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> gcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="opensuse" tabindex="-1"><a class="header-anchor" href="#opensuse" aria-hidden="true">#</a> OpenSUSE</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">zypper</span> <span class="token function">install</span> gcc-c++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="fedora" tabindex="-1"><a class="header-anchor" href="#fedora" aria-hidden="true">#</a> Fedora</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> dnf <span class="token function">install</span> gcc-c++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="gentoo-linux" tabindex="-1"><a class="header-anchor" href="#gentoo-linux" aria-hidden="true">#</a> Gentoo Linux</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> emerge <span class="token parameter variable">--ask</span> sys-devel/gcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="void-linux" tabindex="-1"><a class="header-anchor" href="#void-linux" aria-hidden="true">#</a> Void Linux</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> xbps-install gcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="alpine-linux" tabindex="-1"><a class="header-anchor" href="#alpine-linux" aria-hidden="true">#</a> Alpine Linux</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> apk <span class="token function">add</span> gcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="installing-g-on-windows" tabindex="-1"><a class="header-anchor" href="#installing-g-on-windows" aria-hidden="true">#</a> Installing G++ on Windows</h3>`,9),p={href:"https://jmeubank.github.io/tdm-gcc/download/",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"gcc",-1),m=i(`<p>P.S. We don&#39;t quite recommend using Windows</p><h3 id="running-c-with-g" tabindex="-1"><a class="header-anchor" href="#running-c-with-g" aria-hidden="true">#</a> Running C++ with G++</h3><p>Shouldn&#39;t be that hard but in case you didn&#39;t know:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g++ <span class="token operator">&lt;</span>input <span class="token function">file</span> name<span class="token operator">&gt;</span> <span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>output <span class="token function">file</span> name<span class="token operator">&gt;</span> <span class="token parameter variable">-O2</span> <span class="token operator">&amp;&amp;</span> ./<span class="token operator">&lt;</span>output <span class="token function">file</span> name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can alternatively use CMake but that&#39;s not the point of this guide.</p><details class="custom-container details"><summary>Example CMakeLists.txt</summary><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER</span> g++-<span class="token number">12</span><span class="token punctuation">)</span>

<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.23</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">23</span><span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span>main main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="installing-clang" tabindex="-1"><a class="header-anchor" href="#installing-clang" aria-hidden="true">#</a> Installing Clang</h3>`,7),g={href:"https://releases.llvm.org/download.html",target:"_blank",rel:"noopener noreferrer"};function b(v,k){const e=l("ExternalLinkIcon");return o(),d("div",null,[u,n("p",null,[a("Unlike Linux, GCC is not pre-installed on Windows. Instead, you can visit "),n("a",p,[a("here"),s(e)]),a(" and install a "),h,a(" compiler. There are different versions for 64-bit and 32-bit editions.")]),m,n("p",null,[a("Simply refer to "),n("a",g,[a("this"),s(e)]),a(".")])])}const x=t(c,[["render",b],["__file","compilers.html.vue"]]);export{x as default};
