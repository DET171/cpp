import{o as l,c as e,F as p,d as n,a as s,e as a}from"./app.9ab1c8d4.js";import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";const o={},r=n('<h1 id="greedy-algorithms" tabindex="-1"><a class="header-anchor" href="#greedy-algorithms" aria-hidden="true">#</a> Greedy Algorithms</h1><h2 id="greedy-algorithms-explained" tabindex="-1"><a class="header-anchor" href="#greedy-algorithms-explained" aria-hidden="true">#</a> Greedy Algorithms explained</h2><p>Greedy algorithms is not caring about overall optimal solution, but rather the optimal solution in one particular case (boy am i bad at explaining)</p><p>Steps of greedy algorithms are</p><ol><li>Be lazy</li><li>Search some lazy algorithms</li><li>Learn greedy algorithms</li></ol><p>Basically all you have to do is be lazy</p><p>Example:</p><p>Theres a tree, try to make the biggest number out of all the elements in the tree. You can assume that all bottom elements are linked to any above element (what am i saying) Input format:</p>',8),c=s("p",null,[a("Line 1: A single interger N ("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(" <= "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"N")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),a(" <= "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"100")]),s("annotation",{encoding:"application/x-tex"},"100")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"100")])])]),a(") to determine the number of sub-groups in the tree")],-1),i=s("p",null,[a("Lines 2 - "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"N+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(": A single interger K ("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(" <= "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"K")]),s("annotation",{encoding:"application/x-tex"},"K")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K")])])]),a(" <= "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"100")]),s("annotation",{encoding:"application/x-tex"},"100")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"100")])])]),a(") which is the number of elements in that sub-group of the tree")],-1),m=n(`<p>Output format:</p><p>A single interger, which is the biggest sum of each elements in each branch of the tree</p><p>Sample input:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#839496;">3</span></span>
<span class="line"><span style="color:#839496;">2 4 5</span></span>
<span class="line"><span style="color:#839496;">3 1 2 3 </span></span>
<span class="line"><span style="color:#839496;">2 5 9</span></span>
<span class="line"><span style="color:#839496;"></span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Sample output:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#839496;">17</span></span>
<span class="line"><span style="color:#839496;"></span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This is because I took the biggest elements in each tree and added them together</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> n;</span></span>
<span class="line"><span style="color:#839496;">    cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">n;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;">[</span><span style="color:#D33682;">100</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> sum</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> i</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;i</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">n;</span><span style="color:#859900;">++</span><span style="color:#839496;">i){</span></span>
<span class="line"><span style="color:#839496;">         </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> k;</span></span>
<span class="line"><span style="color:#839496;">         cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;">k;</span></span>
<span class="line"><span style="color:#839496;">         </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> maxi</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">         </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> j</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;j</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">k;</span><span style="color:#859900;">++</span><span style="color:#839496;">j){</span></span>
<span class="line"><span style="color:#839496;">            cin</span><span style="color:#859900;">&gt;&gt;</span><span style="color:#268BD2;">x</span><span style="color:#839496;">[j];</span></span>
<span class="line"><span style="color:#839496;">            maxi</span><span style="color:#859900;">=</span><span style="color:#268BD2;">max</span><span style="color:#839496;">(maxi,</span><span style="color:#268BD2;">x</span><span style="color:#839496;">[j]);</span></span>
<span class="line"><span style="color:#839496;">         }</span></span>
<span class="line"><span style="color:#839496;">         sum</span><span style="color:#859900;">+=</span><span style="color:#839496;">maxi;</span></span>
<span class="line"><span style="color:#839496;">         maxi</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    cout</span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;">sum;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>Yes. Essentially this code just gets the maximum of each branch and adds them into one collective sum.</p>`,9);function h(y,u){return l(),e(p,null,[r,c,i,m],64)}var g=t(o,[["render",h]]);export{g as default};
