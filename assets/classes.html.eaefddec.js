import{_ as n,o as a,c as s,e}from"./app.06966e84.js";const t={},p=e(`<h1 id="structs-and-classes" tabindex="-1"><a class="header-anchor" href="#structs-and-classes" aria-hidden="true">#</a> Structs and Classes</h1><p>Pain ðŸ˜ƒ</p><h3 id="structs" tabindex="-1"><a class="header-anchor" href="#structs" aria-hidden="true">#</a> Structs</h3><p>Pair but not a pair</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This initialises a struct called name. You can now input this struct</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>cin<span class="token operator">&gt;&gt;</span>name<span class="token punctuation">.</span>x<span class="token operator">&gt;&gt;</span>name<span class="token punctuation">.</span>y<span class="token operator">&gt;&gt;</span>name<span class="token punctuation">.</span>c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>or</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d%c&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>name<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>name<span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>name<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also initialise a structs as a data structure (what am i saying it is a data structure)</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//single variable</span>
  name name1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">//array</span>
  name s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h3><p>idk bro go ask someone else</p>`,13),c=[p];function i(o,l){return a(),s("div",null,c)}const r=n(t,[["render",i],["__file","classes.html.vue"]]);export{r as default};
