import{_ as t,r as a,o,c as i,a as n,b as e,d as c,e as p}from"./app.9f193a06.js";const d={},u=n("h2",{id:"general-tips",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#general-tips","aria-hidden":"true"},"#"),e(" General Tips")],-1),l={class:"custom-container danger"},r=p(`<p class="custom-container-title">WHAT NOT TO DO AT ALL COSTS</p><p>Before I start, I thought that you should know that there are a few things that you should avoid at all costs when doing Competitve Programming.</p><ol><li><p>Using Github Copilot or any other AI autocomplete assistants. You will be screamed at by certain contributors if you do.</p></li><li><p>Do NOT share your code during a contest with other contestants during the duration of the contest, this could lead to disqualification for LIFE.</p></li><li><p>Beware of using things like &quot;endl&quot; or &quot;ends&quot; during C++ contests as some CP websites do not allow that.</p></li><li><p>Instead of using &quot;or&quot;, substitute it with &quot;||&quot; as &quot;or&quot; might not work and it will minimise troublesome situations</p></li><li><p>You are allowed to refer to algorithm codes that you already wrote beforehand but definitely NOT from other people/websites :::</p></li></ol><h3 id="fast-input-output" tabindex="-1"><a class="header-anchor" href="#fast-input-output" aria-hidden="true">#</a> Fast Input/Output</h3><h4 id="option-1-use-fastio" tabindex="-1"><a class="header-anchor" href="#option-1-use-fastio" aria-hidden="true">#</a> Option 1: Use FastIO</h4><p>This is if you use <code>cin</code>/<code>cout</code>. Include the following two lines at the top of your code:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>However, do note that if you include <code>ios::sync_with_stdio(false)</code>, then mixing C (<code>scanf</code>/<code>printf</code>) and C++ (<code>cin</code>, <code>cout</code>) style I/O may produce unexpected results.</p><p>The upside is that both <code>cin</code>/<code>cout</code> become faster. Including <code>cin.tie(nullptr)</code> will reduce the runtime if you are using only <code>cin</code> and <code>cout</code>.</p><h4 id="option-2-use-scanf-printf" tabindex="-1"><a class="header-anchor" href="#option-2-use-scanf-printf" aria-hidden="true">#</a> Option 2: Use <code>scanf</code>/<code>printf</code></h4><p>Using <code>scanf</code> and <code>printf</code> from the C STL will decrease your runtime. Example:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter an integer: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Number: %d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="debug-ouput" tabindex="-1"><a class="header-anchor" href="#debug-ouput" aria-hidden="true">#</a> Debug Ouput</h3><p>Debug output should be written to <code>std::cerr</code> (stderr), not <code>std::cout</code> (stdout)</p><h3 id="std-endl" tabindex="-1"><a class="header-anchor" href="#std-endl" aria-hidden="true">#</a> <code>std::endl</code></h3><p>Don&#39;t use <code>endl</code>. AVOID AT ALL COSTS.</p><p><code>std::endl</code> flushes the buffer and causes a spike in the runtime (resulting in certain TLEs). Instead, use <code>\\n</code> which just send the output to the next line.</p>`,17),h=n("code",null,"endl",-1),f=n("code",null,'#define endl "\\n"',-1),k={href:"https://stackoverflow.com/a/35583210",target:"_blank",rel:"noopener noreferrer"};function m(g,b){const s=a("ExternalLinkIcon");return o(),i("div",null,[u,n("div",l,[r,n("p",null,[e("If you're used to typing "),h,e(" (like I am), you can always use "),f,e(". Read this "),n("a",k,[e("SO post"),c(s)]),e(" for more info.")])])])}const w=t(d,[["render",m],["__file","general.html.vue"]]);export{w as default};
