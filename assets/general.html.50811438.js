import{r as o,o as a,c as t,a as e,b as l,F as p,d as c,e as s}from"./app.738b1e49.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const i={},d=c(`<h2 id="general-tips" tabindex="-1"><a class="header-anchor" href="#general-tips" aria-hidden="true">#</a> General Tips</h2><div class="custom-container danger"><p class="custom-container-title">WHAT NOT TO DO AT ALL COSTS</p><p>Before I start, I thought that you should know that there are a few things that you should avoid at all costs when doing Competitve Programming.</p><ol><li><p>Using Github Copilot or any other AI autocomplete assistants. You will be screamed at by certain contributors if you do.</p></li><li><p>Do NOT share your code during a contest with other contestants during the duration of the contest, this could lead to disqualification for LIFE.</p></li><li><p>Beware of using things like &quot;endl&quot; or &quot;ends&quot; during C++ contests as some CP websites do not allow that.</p></li><li><p>Instead of using &quot;or&quot;, substitute it with &quot;||&quot; as &quot;or&quot; might not work and it will minimise troublesome situations</p></li><li><p>You are allowed to refer to algorithm codes that you already wrote beforehand but definitely NOT from other people/websites</p></li></ol></div><h3 id="fast-input-output" tabindex="-1"><a class="header-anchor" href="#fast-input-output" aria-hidden="true">#</a> Fast Input/Output</h3><h4 id="option-1-use-fastio" tabindex="-1"><a class="header-anchor" href="#option-1-use-fastio" aria-hidden="true">#</a> Option 1: Use FastIO</h4><p>This is if you use <code>cin</code>/<code>cout</code>. Include the following two lines at the top of your code:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#CB4B16;">ios</span><span style="color:#839496;">::</span><span style="color:#268BD2;">sync_with_stdio</span><span style="color:#839496;">(</span><span style="color:#B58900;">false</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">cin</span><span style="color:#839496;">.</span><span style="color:#268BD2;">tie</span><span style="color:#839496;">(</span><span style="color:#B58900;">nullptr</span><span style="color:#839496;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>However, do note that if you include <code>ios::sync_with_stdio(false)</code>, then mixing C (<code>scanf</code>/<code>printf</code>) and C++ (<code>cin</code>, <code>cout</code>) style I/O may produce unexpected results.</p><p>The upside is that both <code>cin</code>/<code>cout</code> become faster. Including <code>cin.tie(nullptr)</code> will reduce the runtime if you are using only <code>cin</code> and <code>cout</code>.</p><h4 id="option-2-use-scanf-printf" tabindex="-1"><a class="header-anchor" href="#option-2-use-scanf-printf" aria-hidden="true">#</a> Option 2: Use <code>scanf</code>/<code>printf</code></h4><p>Using <code>scanf</code> and <code>printf</code> from the C STL will decrease your runtime. Example:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> a;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">printf</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;Enter an integer: &quot;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">scanf</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;</span><span style="color:#CB4B16;">%d</span><span style="color:#2AA198;">&quot;</span><span style="color:#839496;">, </span><span style="color:#859900;">&amp;</span><span style="color:#839496;">a);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">printf</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;Number: </span><span style="color:#CB4B16;">%d</span><span style="color:#2AA198;">&quot;</span><span style="color:#839496;">, a);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="debug-ouput" tabindex="-1"><a class="header-anchor" href="#debug-ouput" aria-hidden="true">#</a> Debug Ouput</h3><p>Debug output should be written to <code>std::cerr</code> (stderr), not <code>std::cout</code> (stdout)</p><h3 id="std-endl" tabindex="-1"><a class="header-anchor" href="#std-endl" aria-hidden="true">#</a> <code>std::endl</code></h3><p>Don&#39;t use <code>endl</code>. AVOID AT ALL COSTS.</p><p><code>std::endl</code> flushes the buffer and causes a spike in the runtime (resulting in certain TLEs). Instead, use <code>\\n</code> which just send the output to the next line.</p>`,16),u=s("If you're used to typing "),h=e("code",null,"endl",-1),y=s(" (like I am), you can always use "),f=e("code",null,'#define endl "\\n"',-1),b=s(". Read this "),m={href:"https://stackoverflow.com/a/35583210",target:"_blank",rel:"noopener noreferrer"},g=s("SO post"),_=s(" for more info.");function w(A,B){const n=o("ExternalLinkIcon");return a(),t(p,null,[d,e("p",null,[u,h,y,f,b,e("a",m,[g,l(n)]),_])],64)}var v=r(i,[["render",w]]);export{v as default};
