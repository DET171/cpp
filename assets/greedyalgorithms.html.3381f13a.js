import{_ as m,r as i,o as h,c as k,a as s,b as t,d as a,w as n,e as r}from"./app.21da5c4c.js";const _={},g=r('<h1 id="greedy-algorithms" tabindex="-1"><a class="header-anchor" href="#greedy-algorithms" aria-hidden="true">#</a> Greedy Algorithms</h1><h2 id="greedy-algorithms-explained" tabindex="-1"><a class="header-anchor" href="#greedy-algorithms-explained" aria-hidden="true">#</a> Greedy Algorithms explained</h2><p>Greedy algorithms is not caring about overall optimal solution, but rather the optimal solution in one particular case (boy am i bad at explaining)</p><p>Steps of greedy algorithms are</p><ol><li>Be lazy</li><li>Search some lazy algorithms</li><li>Learn greedy algorithms</li></ol><p>Basically all you have to do is be lazy</p><p>Example:</p><p>Theres a tree, try to make the biggest number out of all the elements in the tree. You can assume that all bottom elements are linked to any above element (what am i saying) Input format:</p>',8),v={class:"katex"},x={class:"katex-mathml"},b=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])],-1),f={class:"katex"},w={class:"katex-mathml"},y=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])],-1),M={class:"katex"},N={class:"katex-mathml"},L=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"100")])],-1),j={class:"katex"},A={class:"katex-mathml"},B=r('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span>',1),S={class:"katex"},K={class:"katex-mathml"},V=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])],-1),z={class:"katex"},E={class:"katex-mathml"},G=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K")])],-1),T={class:"katex"},C={class:"katex-mathml"},I=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"100")])],-1),Y=r(`<p>Output format:</p><p>A single interger, which is the biggest sum of each elements in each branch of the tree</p><p>Sample input:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3
2 4 5
3 1 2 3 
2 5 9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sample output:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>17
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is because I took the biggest elements in each tree and added them together</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">int</span> k<span class="token punctuation">;</span>
         cin<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>
         <span class="token keyword">int</span> maxi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            maxi<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxi<span class="token punctuation">,</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         sum<span class="token operator">+=</span>maxi<span class="token punctuation">;</span>
         maxi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes. Essentially this code just gets the maximum of each branch and adds them into one collective sum.</p>`,9);function O(q,D){const c=i("mn"),e=i("mrow"),l=i("annotation"),o=i("semantics"),p=i("math"),u=i("mi"),d=i("mo");return h(),k("div",null,[g,s("p",null,[t("Line 1: A single interger N ("),s("span",v,[s("span",x,[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(o,null,{default:n(()=>[a(e,null,{default:n(()=>[a(c,null,{default:n(()=>[t("0")]),_:1})]),_:1}),a(l,{encoding:"application/x-tex"},{default:n(()=>[t("0")]),_:1})]),_:1})]),_:1})]),b]),t(" <= "),s("span",f,[s("span",w,[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(o,null,{default:n(()=>[a(e,null,{default:n(()=>[a(u,null,{default:n(()=>[t("N")]),_:1})]),_:1}),a(l,{encoding:"application/x-tex"},{default:n(()=>[t("N")]),_:1})]),_:1})]),_:1})]),y]),t(" <= "),s("span",M,[s("span",N,[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(o,null,{default:n(()=>[a(e,null,{default:n(()=>[a(c,null,{default:n(()=>[t("100")]),_:1})]),_:1}),a(l,{encoding:"application/x-tex"},{default:n(()=>[t("100")]),_:1})]),_:1})]),_:1})]),L]),t(") to determine the number of sub-groups in the tree")]),s("p",null,[t("Lines 2 - "),s("span",j,[s("span",A,[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(o,null,{default:n(()=>[a(e,null,{default:n(()=>[a(u,null,{default:n(()=>[t("N")]),_:1}),a(d,null,{default:n(()=>[t("+")]),_:1}),a(c,null,{default:n(()=>[t("1")]),_:1})]),_:1}),a(l,{encoding:"application/x-tex"},{default:n(()=>[t("N+1")]),_:1})]),_:1})]),_:1})]),B]),t(": A single interger K ("),s("span",S,[s("span",K,[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(o,null,{default:n(()=>[a(e,null,{default:n(()=>[a(c,null,{default:n(()=>[t("0")]),_:1})]),_:1}),a(l,{encoding:"application/x-tex"},{default:n(()=>[t("0")]),_:1})]),_:1})]),_:1})]),V]),t(" <= "),s("span",z,[s("span",E,[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(o,null,{default:n(()=>[a(e,null,{default:n(()=>[a(u,null,{default:n(()=>[t("K")]),_:1})]),_:1}),a(l,{encoding:"application/x-tex"},{default:n(()=>[t("K")]),_:1})]),_:1})]),_:1})]),G]),t(" <= "),s("span",T,[s("span",C,[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(o,null,{default:n(()=>[a(e,null,{default:n(()=>[a(c,null,{default:n(()=>[t("100")]),_:1})]),_:1}),a(l,{encoding:"application/x-tex"},{default:n(()=>[t("100")]),_:1})]),_:1})]),_:1})]),I]),t(") which is the number of elements in that sub-group of the tree")]),Y])}const H=m(_,[["render",O],["__file","greedyalgorithms.html.vue"]]);export{H as default};
