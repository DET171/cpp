import{_ as k,r as e,o as h,c as _,a as s,d as n,w as a,b as t,e as u}from"./app.4950971e.js";const b={},v=s("h1",{id:"bubble-sort",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#bubble-sort","aria-hidden":"true"},"#"),t(" Bubble Sort")],-1),f=s("p",null,"Bubble Sort is a sorting algorithm that compares two adjacent elements and swaps them until they are in the intended order.",-1),y=s("p",null,"Just like the movement of air bubbles in the water that rise up to the surface, each element of the array move to the end in each iteration. Therefore, it is called bubble sort. It is one of the simplest sorting algorithms.",-1),w=s("thead",null,[s("tr",null,[s("th",null,"Cases"),s("th",null,"Time")])],-1),g=s("td",null,"Worst-Case Time Complexity",-1),x={class:"katex"},M={class:"katex-mathml"},B=u('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span>',1),j=s("td",null,"Best-Case Time Complexity",-1),C={class:"katex"},O={class:"katex-mathml"},S=u('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span>',1),z=s("td",null,"Auxiliary Space",-1),T={class:"katex"},I={class:"katex-mathml"},L=u('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span>',1),N=s("td",null,"Boundary Cases",-1),V={class:"katex"},A={class:"katex-mathml"},P=s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])],-1),W=u(`<table><thead><tr><th>Property</th><th>✅/❌</th></tr></thead><tbody><tr><td>Sorting In Place</td><td>✅</td></tr><tr><td>Stable</td><td>✅</td></tr></tbody></table><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/* Code for bubble sort */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>xp<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>yp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>xp<span class="token punctuation">;</span>
  <span class="token operator">*</span>xp <span class="token operator">=</span> <span class="token operator">*</span>yp<span class="token punctuation">;</span>
  <span class="token operator">*</span>yp <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// An optimized version of Bubble Sort</span>
<span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> swapped<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// IF no two elements were swapped by inner loop, then break</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>swapped <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function E(F,J){const p=e("mi"),l=e("mo"),d=e("mn"),m=e("msup"),o=e("mrow"),c=e("annotation"),i=e("semantics"),r=e("math");return h(),_("div",null,[v,f,y,s("table",null,[w,s("tbody",null,[s("tr",null,[g,s("td",null,[s("span",x,[s("span",M,[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(i,null,{default:a(()=>[n(o,null,{default:a(()=>[n(p,{mathvariant:"script"},{default:a(()=>[t("O")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),n(m,null,{default:a(()=>[n(p,null,{default:a(()=>[t("n")]),_:1}),n(d,null,{default:a(()=>[t("2")]),_:1})]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1}),n(c,{encoding:"application/x-tex"},{default:a(()=>[t("\\mathcal{O}(n^2)")]),_:1})]),_:1})]),_:1})]),B]),t(". Worst case occurs when array is reverse sorted.")])]),s("tr",null,[j,s("td",null,[s("span",C,[s("span",O,[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(i,null,{default:a(()=>[n(o,null,{default:a(()=>[n(p,{mathvariant:"script"},{default:a(()=>[t("O")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),n(m,null,{default:a(()=>[n(p,null,{default:a(()=>[t("n")]),_:1}),n(d,null,{default:a(()=>[t("2")]),_:1})]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1}),n(c,{encoding:"application/x-tex"},{default:a(()=>[t("\\mathcal{O}(n^2)")]),_:1})]),_:1})]),_:1})]),S]),t(". Best case occurs when array is already sorted.")])]),s("tr",null,[z,s("td",null,[s("span",T,[s("span",I,[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(i,null,{default:a(()=>[n(o,null,{default:a(()=>[n(p,{mathvariant:"script"},{default:a(()=>[t("O")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),n(d,null,{default:a(()=>[t("1")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1}),n(c,{encoding:"application/x-tex"},{default:a(()=>[t("\\mathcal{O}(1)")]),_:1})]),_:1})]),_:1})]),L])])]),s("tr",null,[N,s("td",null,[t("Bubble sort takes minimum time (order of "),s("span",V,[s("span",A,[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(i,null,{default:a(()=>[n(o,null,{default:a(()=>[n(p,null,{default:a(()=>[t("n")]),_:1})]),_:1}),n(c,{encoding:"application/x-tex"},{default:a(()=>[t("n")]),_:1})]),_:1})]),_:1})]),P]),t(") when elements are already sorted.")])])])]),W])}const D=k(b,[["render",E],["__file","bubblesort.html.vue"]]);export{D as default};
