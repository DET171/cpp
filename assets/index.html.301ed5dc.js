import{r as o,o as t,c as r,a as s,b as a,w as p,F as c,e as n,d as y}from"./app.0bc457c7.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const u={},b=s("h2",{id:"stl-data-structures-mostly-by-darren",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#stl-data-structures-mostly-by-darren","aria-hidden":"true"},"#"),n(" STL Data Structures (mostly by Darren)")],-1),d=s("p",null,"I'm going to talk about some data structures found in the standard library and how to implement them, along with a few useful functions you should probably know about.",-1),m={class:"table-of-contents"},h=n("STL Data Structures (mostly by Darren)"),B=n("Arrays"),D=n("Vectors"),f=n("Deques"),A=n("Stacks"),g=n("Queues"),k=n("Priority Queues"),q=n("Maps"),_=n("Sets"),w=n("Final Notes"),v=y(`<h3 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays" aria-hidden="true">#</a> Arrays</h3><p>By far the simplest data structure you should probably know about is the array.</p><p>Arrays have:</p><ul><li>a fixed size (number of elements it can contain) <ul><li>no capability to erase / append elements</li></ul></li><li>elements with all the same datatypes</li></ul><p>Here&#39;s a short snippet showing what arrays can do:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[</span><span style="color:#D33682;">5</span><span style="color:#839496;">];</span><span style="color:#586E75;font-style:italic;"> // defines an array of ints with size 5</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[</span><span style="color:#D33682;">0</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span><span style="color:#586E75;font-style:italic;"> // sets the first element of the array to 1</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[</span><span style="color:#D33682;">3</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">57</span><span style="color:#839496;">;</span><span style="color:#586E75;font-style:italic;"> // sets the fourth element to 57</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[</span><span style="color:#D33682;">3</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">  cin </span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[</span><span style="color:#D33682;">2</span><span style="color:#839496;">];</span><span style="color:#586E75;font-style:italic;"> // get the user to input the third element of the array</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">();</span><span style="color:#586E75;font-style:italic;"> // size of the array</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="vectors" tabindex="-1"><a class="header-anchor" href="#vectors" aria-hidden="true">#</a> Vectors</h3><p>Basically arrays with the capability to append elements (from the end) and pop elements from the back.</p><p>Erasing elements from anywhere in the vector is also allowed.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  vector</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> v;</span><span style="color:#586E75;font-style:italic;"> // defines a vector of ints</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push_back</span><span style="color:#839496;">(</span><span style="color:#D33682;">5</span><span style="color:#839496;">);</span><span style="color:#586E75;font-style:italic;"> // appends 5 to the vector</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push_back</span><span style="color:#839496;">(</span><span style="color:#D33682;">9</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push_back</span><span style="color:#839496;">(</span><span style="color:#D33682;">6</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push_back</span><span style="color:#839496;">(</span><span style="color:#D33682;">0</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pop_back</span><span style="color:#839496;">();</span><span style="color:#586E75;font-style:italic;"> // now what does the vector contain?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">();</span><span style="color:#586E75;font-style:italic;"> // size of the vector</span></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">front</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39; &#39;</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">back</span><span style="color:#839496;">();</span><span style="color:#586E75;font-style:italic;"> // first and last elements</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">sort</span><span style="color:#839496;">(</span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">begin</span><span style="color:#839496;">(), </span><span style="color:#268BD2;">v</span><span style="color:#839496;">.</span><span style="color:#268BD2;">end</span><span style="color:#839496;">());</span><span style="color:#586E75;font-style:italic;"> // sorts the vector</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">auto</span><span style="color:#839496;"> i : v) cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> i </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39; &#39;</span><span style="color:#839496;">;</span><span style="color:#586E75;font-style:italic;"> // iterates through every element in the vector</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="deques" tabindex="-1"><a class="header-anchor" href="#deques" aria-hidden="true">#</a> Deques</h3><p>Pronounced &#39;deck&#39; or &#39;d-q&#39;, I don&#39;t give a damn about how it&#39;s pronounced.</p><p>It&#39;s a vector on steroids, allowing you to insert (from the front) and append (from the back) elements. It can also pop elements from the front &amp; back.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  deque</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> d;</span><span style="color:#586E75;font-style:italic;"> // creates a deque of long ints</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // gets the user to cin 5 elements and store them in the deque</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> i </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">; i </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> </span><span style="color:#D33682;">5</span><span style="color:#839496;">; i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> a;</span></span>
<span class="line"><span style="color:#839496;">    cin </span><span style="color:#859900;">&gt;&gt;</span><span style="color:#839496;"> a;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">d</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push_back</span><span style="color:#839496;">(a);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">d</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push_front</span><span style="color:#839496;">(</span><span style="color:#D33682;">55</span><span style="color:#839496;">);</span><span style="color:#586E75;font-style:italic;"> // now 55 is at the front</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // d.size(), d.front() and d.back() still work</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // sort(d.begin(), d.end() still works)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">d</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pop_back</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">d</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pop_front</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot;oh bother there are only &quot;</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">d</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot; elements left.&quot;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="stacks" tabindex="-1"><a class="header-anchor" href="#stacks" aria-hidden="true">#</a> Stacks</h3><p>Stacks are basically stacks of <em>roti prata</em> (or your mountain of procrastinated homework).</p><p>You can only access the top element, and only erase the top element. (What kind of sick freak would take prata from the bottom of the stack)?</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  stack</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> s;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">5</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">7</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">69</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">top</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot; is currently 1st place in kahoot</span><span style="color:#CB4B16;">\\n</span><span style="color:#2AA198;">&quot;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot;there are &quot;</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot; players</span><span style="color:#CB4B16;">\\n</span><span style="color:#2AA198;">&quot;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">while</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">empty</span><span style="color:#839496;">()) </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pop</span><span style="color:#839496;">();</span><span style="color:#586E75;font-style:italic;"> // check if the stack is empty, if not, keep popping!</span></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot; more players left</span><span style="color:#CB4B16;">\\n</span><span style="color:#2AA198;">&quot;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="queues" tabindex="-1"><a class="header-anchor" href="#queues" aria-hidden="true">#</a> Queues</h3><p>Like the perpetually long canteen queue in the HS Canteen during 1:30 pm lunch break, queues add elements from the back and pop elements from the front (in case you don&#39;t know how a real-life queue works).</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  queue</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> q;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">5</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">4</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">4</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">3</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;</span><span style="color:#CB4B16;">\\n</span><span style="color:#2AA198;">&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // quick way to see all the elements in the queue</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">while</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">empty</span><span style="color:#839496;">()) {</span></span>
<span class="line"><span style="color:#839496;">    cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">front</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39; &#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pop</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // NOTE: notice that only 1 occurrence of 4 is printed out, because a queue removes duplicate values</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="priority-queues" tabindex="-1"><a class="header-anchor" href="#priority-queues" aria-hidden="true">#</a> Priority Queues</h3><p>Like a queue, but the most popular boy is now at the end perpetually.</p><p>Priority queues sort the elements every time a new element is pushed in.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  priority_queue</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> pq;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">pq</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">5</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">pq</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">6</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">pq</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#D33682;">3</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">pq</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;</span><span style="color:#CB4B16;">\\n</span><span style="color:#2AA198;">&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // NOTE: notice that the elements are printed in ascending order!</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">while</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">pq</span><span style="color:#839496;">.</span><span style="color:#268BD2;">empty</span><span style="color:#839496;">()) {</span></span>
<span class="line"><span style="color:#839496;">    cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">pq</span><span style="color:#839496;">.</span><span style="color:#268BD2;">front</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39; &#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">q</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pop</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="maps" tabindex="-1"><a class="header-anchor" href="#maps" aria-hidden="true">#</a> Maps</h3><p>A map is a key-value data structure, with a key being linked to a value (can be different datatype).</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  map</span><span style="color:#859900;">&lt;</span><span style="color:#839496;">string, </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> m;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">m</span><span style="color:#839496;">[</span><span style="color:#2AA198;">&quot;yo&quot;</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">6</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">m</span><span style="color:#839496;">[</span><span style="color:#2AA198;">&quot;mom&quot;</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">9</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">m</span><span style="color:#839496;">[</span><span style="color:#2AA198;">&quot;so&quot;</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">4</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">m</span><span style="color:#839496;">[</span><span style="color:#2AA198;">&quot;fat&quot;</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">420</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">m</span><span style="color:#839496;">[</span><span style="color:#2AA198;">&quot;fat&quot;</span><span style="color:#839496;">] </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;</span><span style="color:#CB4B16;">\\n</span><span style="color:#2AA198;">&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">m</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;</span><span style="color:#CB4B16;">\\n</span><span style="color:#2AA198;">&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">m</span><span style="color:#839496;">.</span><span style="color:#268BD2;">insert</span><span style="color:#839496;">(</span><span style="color:#268BD2;">pair</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">string</span><span style="color:#839496;">, </span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;">&gt;(</span><span style="color:#2AA198;">&quot;abc&quot;</span><span style="color:#839496;">, </span><span style="color:#D33682;">123</span><span style="color:#839496;">));</span><span style="color:#586E75;font-style:italic;"> // can also insert like this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // loop through key and value</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">auto</span><span style="color:#839496;"> itr </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">marks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">begin</span><span style="color:#839496;">(); itr </span><span style="color:#859900;">!=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">marks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">end</span><span style="color:#839496;">(); </span><span style="color:#859900;">++</span><span style="color:#839496;">itr) {</span></span>
<span class="line"><span style="color:#839496;">    cout  </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">itr</span><span style="color:#839496;">-&gt;</span><span style="color:#268BD2;">first</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot;: &quot;</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">itr</span><span style="color:#839496;">-&gt;</span><span style="color:#268BD2;">second</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;n&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="sets" tabindex="-1"><a class="header-anchor" href="#sets" aria-hidden="true">#</a> Sets</h3><p>A set is a more picky vector, it:</p><ul><li>removes duplicate values</li><li>sorts every time you insert an element</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#859900;">#include</span><span style="color:#B58900;"> </span><span style="color:#2AA198;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#859900;">using</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">namespace</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">std</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;"> </span><span style="color:#268BD2;">main</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  set</span><span style="color:#859900;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#859900;">&gt;</span><span style="color:#839496;"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">insert</span><span style="color:#839496;">(</span><span style="color:#D33682;">40</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">insert</span><span style="color:#839496;">(</span><span style="color:#D33682;">35</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">insert</span><span style="color:#839496;">(</span><span style="color:#D33682;">55</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#CB4B16;">set</span><span style="color:#839496;">&lt;</span><span style="color:#93A1A1;font-weight:bold;">int</span><span style="color:#839496;">&gt;::iterator itr;</span><span style="color:#586E75;font-style:italic;"> // defines an iterator of the set</span></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot;this set weighs &quot;</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">size</span><span style="color:#839496;">() </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot; kg</span><span style="color:#CB4B16;">\\n</span><span style="color:#2AA198;">&quot;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // prints all the elements in the set</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;"> (itr </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">begin</span><span style="color:#839496;">(); itr </span><span style="color:#859900;">!=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">end</span><span style="color:#839496;">(); s</span><span style="color:#859900;">++</span><span style="color:#839496;">) cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#859900;">*</span><span style="color:#839496;">itr </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot; &quot;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">erase</span><span style="color:#839496;">(</span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">begin</span><span style="color:#839496;">(), </span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">find</span><span style="color:#839496;">(</span><span style="color:#D33682;">55</span><span style="color:#839496;">));</span><span style="color:#586E75;font-style:italic;"> // remove 55</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // lower_bound() and upper_bound(): returns an iterator to the first element which is</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  // equal to OR before / after the element in the set</span></span>
<span class="line"><span style="color:#839496;">  cout </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#859900;">*</span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">lower_bound</span><span style="color:#839496;">(</span><span style="color:#D33682;">37</span><span style="color:#839496;">) </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot; &quot;</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;&lt;</span><span style="color:#839496;"> </span><span style="color:#859900;">*</span><span style="color:#268BD2;">s</span><span style="color:#839496;">.</span><span style="color:#268BD2;">upper_bound</span><span style="color:#839496;">(</span><span style="color:#D33682;">37</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="final-notes" tabindex="-1"><a class="header-anchor" href="#final-notes" aria-hidden="true">#</a> Final Notes</h3><p>There are dozens of STL data structures out there, but these are the most popular ones.</p>`,34),E=n("Anyway I copied most of them from "),x={href:"https://www.geeksforgeeks.org",target:"_blank",rel:"noopener noreferrer"},C=n("https://www.geeksforgeeks.org"),z=n(".");function S(L,N){const l=o("RouterLink"),e=o("ExternalLinkIcon");return t(),r(c,null,[b,d,s("nav",m,[s("ul",null,[s("li",null,[a(l,{to:"#stl-data-structures-mostly-by-darren"},{default:p(()=>[h]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#arrays"},{default:p(()=>[B]),_:1})]),s("li",null,[a(l,{to:"#vectors"},{default:p(()=>[D]),_:1})]),s("li",null,[a(l,{to:"#deques"},{default:p(()=>[f]),_:1})]),s("li",null,[a(l,{to:"#stacks"},{default:p(()=>[A]),_:1})]),s("li",null,[a(l,{to:"#queues"},{default:p(()=>[g]),_:1})]),s("li",null,[a(l,{to:"#priority-queues"},{default:p(()=>[k]),_:1})]),s("li",null,[a(l,{to:"#maps"},{default:p(()=>[q]),_:1})]),s("li",null,[a(l,{to:"#sets"},{default:p(()=>[_]),_:1})]),s("li",null,[a(l,{to:"#final-notes"},{default:p(()=>[w]),_:1})])])])])]),v,s("p",null,[E,s("a",x,[C,a(e)]),z])],64)}var V=i(u,[["render",S]]);export{V as default};
