import{r as e,o as t,c as o,b as p,F as r,a as s,e as a,d as n}from"./app.d82c7ad2.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const m={},i=s("h1",{id:"dynamic-programming",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#dynamic-programming","aria-hidden":"true"},"#"),a(" Dynamic programming")],-1),h=n(`<h2 id="dynamic-programming-explained" tabindex="-1"><a class="header-anchor" href="#dynamic-programming-explained" aria-hidden="true">#</a> Dynamic programming explained</h2><p>Dynamic programming is a technique used to the vast majority of competitive programming, usually used to speed recursive or naive algorithms up. It can be applied when a problem can be solved using smaller versions of the same problem.</p><p>Dynamic programming has 3 parts: a state, a transition and a base case.</p><p>The simplest example often used to explain dynamic programming is to find Fibonacci numbers. We shall demonstrate the use of a recursive method, followed by 2 types of dynamic programming, as well as the different parts.</p><p>Naive recursive method (TLEs):</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sum</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> n) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (n </span><span style="color:#859900;">&lt;=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;"> n;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sum</span><span style="color:#839496;">(n </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">) </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sum</span><span style="color:#839496;">(n </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#D33682;">2</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,6),y=s("p",null,[a("While this method works, it is far too slow and may check multiple numbers multiple times. At "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"="),s("mn",null,"5")]),s("annotation",{encoding:"application/x-tex"},"n = 5")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"5")])])]),a(", "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"sum"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\text{sum}(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"sum")]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a(" is recalculated 3 times.")],-1),u=n(`<h3 id="top-down-dp" tabindex="-1"><a class="header-anchor" href="#top-down-dp" aria-hidden="true">#</a> Top-down DP</h3><p>Top-down dynamic programming is a speedup of naive recursive functions, by preventing the need of recalculating the same function multiple times. This involves memoisation, which is the storing of previous solutions.</p><p>Top-down Fibonacci algorithm:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[</span><span style="color:#D33682;">100005</span><span style="color:#839496;">];</span><span style="color:#586E75;font-style:italic;"> // All initially set to -1</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sum</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> n) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[n] </span><span style="color:#859900;">!=</span><span style="color:#839496;"> </span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[n];</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (n </span><span style="color:#859900;">&lt;=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">) { </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[n] </span><span style="color:#859900;">=</span><span style="color:#839496;"> n; </span><span style="color:#859900;">return</span><span style="color:#839496;"> n; }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[n] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sum</span><span style="color:#839496;">(n </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">) </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sum</span><span style="color:#839496;">(n </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#D33682;">2</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[n];</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,4),d=s("p",null,[a("The states are stored in "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"memo"),s("mo",{stretchy:"false"},"["),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"\\text{memo}[]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"memo")]),s("span",{class:"mopen"},"["),s("span",{class:"mclose"},"]")])])]),a(", and the transition is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"memo"),s("mo",{stretchy:"false"},"["),s("mi",null,"n"),s("mo",{stretchy:"false"},"]"),s("mo",null,"="),s("mtext",null,"sum"),s("mo",{stretchy:"false"},"["),s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]"),s("mo",null,"+"),s("mtext",null,"sum"),s("mo",{stretchy:"false"},"["),s("mi",null,"n"),s("mo",null,"\u2212"),s("mn",null,"2"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"\\text{memo}[n] = \\text{sum}[n - 1] + \\text{sum}[n - 2]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"memo")]),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"sum")]),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"sum")]),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mclose"},"]")])])]),a(". The base cases are when "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"\u2264"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n \\leq 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"\u2264"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"memo"),s("mo",{stretchy:"false"},"["),s("mi",null,"n"),s("mo",{stretchy:"false"},"]"),s("mo",null,"="),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"\\text{memo}[n] = n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"memo")]),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(".")],-1),g=n(`<p>While this form of DP may be more intuitive sometimes, it usually takes up more memory.</p><h3 id="bottom-up-dp" tabindex="-1"><a class="header-anchor" href="#bottom-up-dp" aria-hidden="true">#</a> Bottom up DP</h3><p>Bottom-up dynamic programming is where you calculate all states leading up to the state that you are searching for.</p><p>Bottom-up Fibonacci algorithm:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[n];</span></span>
<span class="line"><span style="color:#268BD2;">memo</span><span style="color:#839496;">[</span><span style="color:#D33682;">0</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">, </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[</span><span style="color:#D33682;">1</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> i </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">2</span><span style="color:#839496;">; i </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> n; i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[i] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[i</span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">] </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">memo</span><span style="color:#839496;">[i</span><span style="color:#859900;">-</span><span style="color:#D33682;">2</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,5),b=s("p",null,[a("The states are stored in "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"memo"),s("mo",{stretchy:"false"},"["),s("mi",null,"n"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"\\text{memo}[n]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"memo")]),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},"]")])])]),a(", the base cases are "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"memo"),s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"\\text{memo}[0]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"memo")]),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},"]")])])]),a(" and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"memo"),s("mo",{stretchy:"false"},"["),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"\\text{memo}[1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"memo")]),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),a(", and the transition is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"memo"),s("mo",{stretchy:"false"},"["),s("mi",null,"i"),s("mo",{stretchy:"false"},"]"),s("mo",null,"="),s("mtext",null,"memo"),s("mo",{stretchy:"false"},"["),s("mi",null,"i"),s("mo",null,"\u2212"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]"),s("mo",null,"+"),s("mtext",null,"memo"),s("mo",{stretchy:"false"},"["),s("mi",null,"i"),s("mo",null,"\u2212"),s("mn",null,"2"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"\\text{memo}[i] = \\text{memo}[i - 1] + \\text{memo}[i - 2]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"memo")]),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"memo")]),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"memo")]),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"\u2212"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mclose"},"]")])])]),a(".")],-1),x=n('<h3 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h3><p>The 2 forms of DP have their own advantages. While bottom-up DP is usually more intuitive, some questions require the use of top-down DP. Regardless, both forms of DP help to speed up programs.</p><h2 id="common-dp-algorithms" tabindex="-1"><a class="header-anchor" href="#common-dp-algorithms" aria-hidden="true">#</a> Common DP algorithms</h2><h3 id="prefix-suffix-sum" tabindex="-1"><a class="header-anchor" href="#prefix-suffix-sum" aria-hidden="true">#</a> Prefix/suffix sum</h3><h4 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h4>',5),f=s("p",null,[a("The objective of this form of dynamic programming is to be able to find the sum of all elements over a given range in an array. Usually, the naive code would run in "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(N)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")")])])]),a(" time for each query for a range sum:")],-1),w=n(`<div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[n], sum </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> i </span><span style="color:#859900;">=</span><span style="color:#839496;"> lb; i </span><span style="color:#859900;">&lt;=</span><span style="color:#839496;"> ub; i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">  sum </span><span style="color:#859900;">+=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[i];</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,1),v=s("p",null,[a("While this method may be fast to find the range sum for 1 query, if there are multiple queries, the algorithm would run in "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mi",null,"Q"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(NQ)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"NQ"),s("span",{class:"mclose"},")")])])]),a(" in the worst case, where "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"Q")]),s("annotation",{encoding:"application/x-tex"},"Q")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"Q")])])]),a(" is the number of queries.")],-1),k=n(`<h4 id="precomputation" tabindex="-1"><a class="header-anchor" href="#precomputation" aria-hidden="true">#</a> Precomputation</h4><p>Precomputation is the act of making calculations prior to the actual query. While some of this calculations may not be used, having a set of numbers to refer to is much faster than just recalculating each time, sort of like memoisation. For the prefix sum problem, notice than the sum of a range is equivalent to the sum of all numbers leading up to the end, minus the sum of all numbers leading up to the front of the range.</p><p>Hence, we can store the sums as so:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="shiki" style="background-color:#002B36;"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[n], </span><span style="color:#268BD2;">prefix</span><span style="color:#839496;">[n];</span></span>
<span class="line"><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> i </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">; i </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> n; i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#839496;">i) </span><span style="color:#268BD2;">prefix</span><span style="color:#839496;">[i] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[i];</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">else</span><span style="color:#839496;"> </span><span style="color:#268BD2;">prefix</span><span style="color:#839496;">[i] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">arr</span><span style="color:#839496;">[i] </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">prefix</span><span style="color:#839496;">[i</span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">long</span><span style="color:#839496;"> sum </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">prefix</span><span style="color:#839496;">[ub] </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#268BD2;">prefix</span><span style="color:#839496;">[lb</span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">];</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,4),D=s("p",null,[a("While this method may seem too slow, it actually shortens down the time for each query to be "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),a("! So, the time complexity of the program overall would be "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"script"},"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",null,"+"),s("mi",null,"Q"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\mathcal{O}(N + Q)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathcal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"Q"),s("span",{class:"mclose"},")")])])]),a(".")],-1),A=s("h4",{id:"conclusion-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion-1","aria-hidden":"true"},"#"),a(" Conclusion")],-1),M=s("p",null,"Prefix sums is a good way of keeping track of range sums. While prefix sums are a good way of handling querys on range sums, it is unable to handle updates. In the chapter on trees, we will touch on this.",-1);function _(B,L){const l=e("Toc");return t(),o(r,null,[i,p(l),h,y,u,d,g,b,x,f,w,v,k,D,A,M],64)}var q=c(m,[["render",_]]);export{q as default};
