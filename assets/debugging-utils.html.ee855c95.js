import{_ as e,r as o,o as p,c,a as n,b as s,d as t,e as i}from"./app.1e698665.js";const r={},l=i(`<h1 id="debugging-resources" tabindex="-1"><a class="header-anchor" href="#debugging-resources" aria-hidden="true">#</a> Debugging Resources</h1><h2 id="standard-error-stream-stderr" tabindex="-1"><a class="header-anchor" href="#standard-error-stream-stderr" aria-hidden="true">#</a> Standard Error Stream (<code>stderr</code>)</h2><p>Most OJs (iirc) don&#39;t read the error stream, so you can output whatever you want into <code>stderr</code>, and it most likely wouldn&#39;t affect whether you AC the question or not.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Printing too much output to <code>stderr</code> can result in a TLE</p></div><h3 id="function-for-outputting-to-stderr" tabindex="-1"><a class="header-anchor" href="#function-for-outputting-to-stderr" aria-hidden="true">#</a> Function for outputting to <code>stderr</code></h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dbg</span><span class="token punctuation">(</span>T outVar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cerr <span class="token operator">&lt;&lt;</span> outVar <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> S<span class="token operator">&gt;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dbg</span><span class="token punctuation">(</span>T outVar<span class="token punctuation">,</span> S<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cerr <span class="token operator">&lt;&lt;</span> outVar <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
	<span class="token function">out</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">dbg</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this gets printed to stderr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debugging-macro" tabindex="-1"><a class="header-anchor" href="#debugging-macro" aria-hidden="true">#</a> Debugging Macro</h2><p><em>psssst this is taken from the USACO guide</em></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">dbg</span><span class="token expression"><span class="token punctuation">(</span>v<span class="token punctuation">)</span>                                                                 </span><span class="token punctuation">\\</span>
	<span class="token expression">cout <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot;Line(&quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token constant">__LINE__</span> <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot;) -&gt; &quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> #v <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot; = &quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span></span>

<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// pretend this variable is important</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">dbg</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Line(10) -&gt; x = 10</span>
	x <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
	<span class="token function">dbg</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Line(12) -&gt; x = 5000</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debugging-stl-data-structures" tabindex="-1"><a class="header-anchor" href="#debugging-stl-data-structures" aria-hidden="true">#</a> Debugging STL Data Structures</h2>`,10),u={href:"https://gist.github.com/SansPapyrus683/61b65d4d7ec223b48ebf5c3bb382ba8d",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"vector",-1),k=n("code",null,"pair",-1),g=n("h2",{id:"debuggers",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#debuggers","aria-hidden":"true"},"#"),s(" Debuggers")],-1),m={href:"https://code.visualstudio.com/docs/cpp/cpp-debug",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.jetbrains.com/help/clion/debugging-code.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.sourceware.org/gdb/documentation/",target:"_blank",rel:"noopener noreferrer"};function h(f,_){const a=o("ExternalLinkIcon");return p(),c("div",null,[l,n("p",null,[s("You can use "),n("a",u,[s("this debugging template"),t(a)]),s(" which allows you to print most built-in data structures like "),d,s(" or "),k,s(".")]),g,n("ul",null,[n("li",null,[n("a",m,[s("Debugging C++ in VSCode"),t(a)])]),n("li",null,[n("a",v,[s("Debugging in CLion"),t(a)])]),n("li",null,[n("a",b,[s("GDB"),t(a)])])])])}const y=e(r,[["render",h],["__file","debugging-utils.html.vue"]]);export{y as default};
